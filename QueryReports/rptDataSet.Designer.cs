//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QueryReports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("rptDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class rptDataSet : global::System.Data.DataSet {
        
        private StockDtl0DataTable tableStockDtl0;
        
        private StockDtl1DataTable tableStockDtl1;
        
        private StockDtl2DataTable tableStockDtl2;
        
        private StockDtlDataTable tableStockDtl;
        
        private StoreHisListDataTable tableStoreHisList;
        
        private SysLogDataTable tableSysLog;
        
        private UnkeepListDataTable tableUnkeepList;
        
        private SafeAlarmDataTable tableSafeAlarm;
        
        private StockDtl3DataTable tableStockDtl3;
        
        private WareCellCountDataTable tableWareCellCount;
        
        private IOList_ExtDataTable tableIOList_Ext;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rptDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rptDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StockDtl0"] != null)) {
                    base.Tables.Add(new StockDtl0DataTable(ds.Tables["StockDtl0"]));
                }
                if ((ds.Tables["StockDtl1"] != null)) {
                    base.Tables.Add(new StockDtl1DataTable(ds.Tables["StockDtl1"]));
                }
                if ((ds.Tables["StockDtl2"] != null)) {
                    base.Tables.Add(new StockDtl2DataTable(ds.Tables["StockDtl2"]));
                }
                if ((ds.Tables["StockDtl"] != null)) {
                    base.Tables.Add(new StockDtlDataTable(ds.Tables["StockDtl"]));
                }
                if ((ds.Tables["StoreHisList"] != null)) {
                    base.Tables.Add(new StoreHisListDataTable(ds.Tables["StoreHisList"]));
                }
                if ((ds.Tables["SysLog"] != null)) {
                    base.Tables.Add(new SysLogDataTable(ds.Tables["SysLog"]));
                }
                if ((ds.Tables["UnkeepList"] != null)) {
                    base.Tables.Add(new UnkeepListDataTable(ds.Tables["UnkeepList"]));
                }
                if ((ds.Tables["SafeAlarm"] != null)) {
                    base.Tables.Add(new SafeAlarmDataTable(ds.Tables["SafeAlarm"]));
                }
                if ((ds.Tables["StockDtl3"] != null)) {
                    base.Tables.Add(new StockDtl3DataTable(ds.Tables["StockDtl3"]));
                }
                if ((ds.Tables["WareCellCount"] != null)) {
                    base.Tables.Add(new WareCellCountDataTable(ds.Tables["WareCellCount"]));
                }
                if ((ds.Tables["IOList_Ext"] != null)) {
                    base.Tables.Add(new IOList_ExtDataTable(ds.Tables["IOList_Ext"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDtl0DataTable StockDtl0 {
            get {
                return this.tableStockDtl0;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDtl1DataTable StockDtl1 {
            get {
                return this.tableStockDtl1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDtl2DataTable StockDtl2 {
            get {
                return this.tableStockDtl2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDtlDataTable StockDtl {
            get {
                return this.tableStockDtl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoreHisListDataTable StoreHisList {
            get {
                return this.tableStoreHisList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SysLogDataTable SysLog {
            get {
                return this.tableSysLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnkeepListDataTable UnkeepList {
            get {
                return this.tableUnkeepList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SafeAlarmDataTable SafeAlarm {
            get {
                return this.tableSafeAlarm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDtl3DataTable StockDtl3 {
            get {
                return this.tableStockDtl3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WareCellCountDataTable WareCellCount {
            get {
                return this.tableWareCellCount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IOList_ExtDataTable IOList_Ext {
            get {
                return this.tableIOList_Ext;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            rptDataSet cln = ((rptDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StockDtl0"] != null)) {
                    base.Tables.Add(new StockDtl0DataTable(ds.Tables["StockDtl0"]));
                }
                if ((ds.Tables["StockDtl1"] != null)) {
                    base.Tables.Add(new StockDtl1DataTable(ds.Tables["StockDtl1"]));
                }
                if ((ds.Tables["StockDtl2"] != null)) {
                    base.Tables.Add(new StockDtl2DataTable(ds.Tables["StockDtl2"]));
                }
                if ((ds.Tables["StockDtl"] != null)) {
                    base.Tables.Add(new StockDtlDataTable(ds.Tables["StockDtl"]));
                }
                if ((ds.Tables["StoreHisList"] != null)) {
                    base.Tables.Add(new StoreHisListDataTable(ds.Tables["StoreHisList"]));
                }
                if ((ds.Tables["SysLog"] != null)) {
                    base.Tables.Add(new SysLogDataTable(ds.Tables["SysLog"]));
                }
                if ((ds.Tables["UnkeepList"] != null)) {
                    base.Tables.Add(new UnkeepListDataTable(ds.Tables["UnkeepList"]));
                }
                if ((ds.Tables["SafeAlarm"] != null)) {
                    base.Tables.Add(new SafeAlarmDataTable(ds.Tables["SafeAlarm"]));
                }
                if ((ds.Tables["StockDtl3"] != null)) {
                    base.Tables.Add(new StockDtl3DataTable(ds.Tables["StockDtl3"]));
                }
                if ((ds.Tables["WareCellCount"] != null)) {
                    base.Tables.Add(new WareCellCountDataTable(ds.Tables["WareCellCount"]));
                }
                if ((ds.Tables["IOList_Ext"] != null)) {
                    base.Tables.Add(new IOList_ExtDataTable(ds.Tables["IOList_Ext"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStockDtl0 = ((StockDtl0DataTable)(base.Tables["StockDtl0"]));
            if ((initTable == true)) {
                if ((this.tableStockDtl0 != null)) {
                    this.tableStockDtl0.InitVars();
                }
            }
            this.tableStockDtl1 = ((StockDtl1DataTable)(base.Tables["StockDtl1"]));
            if ((initTable == true)) {
                if ((this.tableStockDtl1 != null)) {
                    this.tableStockDtl1.InitVars();
                }
            }
            this.tableStockDtl2 = ((StockDtl2DataTable)(base.Tables["StockDtl2"]));
            if ((initTable == true)) {
                if ((this.tableStockDtl2 != null)) {
                    this.tableStockDtl2.InitVars();
                }
            }
            this.tableStockDtl = ((StockDtlDataTable)(base.Tables["StockDtl"]));
            if ((initTable == true)) {
                if ((this.tableStockDtl != null)) {
                    this.tableStockDtl.InitVars();
                }
            }
            this.tableStoreHisList = ((StoreHisListDataTable)(base.Tables["StoreHisList"]));
            if ((initTable == true)) {
                if ((this.tableStoreHisList != null)) {
                    this.tableStoreHisList.InitVars();
                }
            }
            this.tableSysLog = ((SysLogDataTable)(base.Tables["SysLog"]));
            if ((initTable == true)) {
                if ((this.tableSysLog != null)) {
                    this.tableSysLog.InitVars();
                }
            }
            this.tableUnkeepList = ((UnkeepListDataTable)(base.Tables["UnkeepList"]));
            if ((initTable == true)) {
                if ((this.tableUnkeepList != null)) {
                    this.tableUnkeepList.InitVars();
                }
            }
            this.tableSafeAlarm = ((SafeAlarmDataTable)(base.Tables["SafeAlarm"]));
            if ((initTable == true)) {
                if ((this.tableSafeAlarm != null)) {
                    this.tableSafeAlarm.InitVars();
                }
            }
            this.tableStockDtl3 = ((StockDtl3DataTable)(base.Tables["StockDtl3"]));
            if ((initTable == true)) {
                if ((this.tableStockDtl3 != null)) {
                    this.tableStockDtl3.InitVars();
                }
            }
            this.tableWareCellCount = ((WareCellCountDataTable)(base.Tables["WareCellCount"]));
            if ((initTable == true)) {
                if ((this.tableWareCellCount != null)) {
                    this.tableWareCellCount.InitVars();
                }
            }
            this.tableIOList_Ext = ((IOList_ExtDataTable)(base.Tables["IOList_Ext"]));
            if ((initTable == true)) {
                if ((this.tableIOList_Ext != null)) {
                    this.tableIOList_Ext.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "rptDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/rptDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStockDtl0 = new StockDtl0DataTable();
            base.Tables.Add(this.tableStockDtl0);
            this.tableStockDtl1 = new StockDtl1DataTable();
            base.Tables.Add(this.tableStockDtl1);
            this.tableStockDtl2 = new StockDtl2DataTable();
            base.Tables.Add(this.tableStockDtl2);
            this.tableStockDtl = new StockDtlDataTable();
            base.Tables.Add(this.tableStockDtl);
            this.tableStoreHisList = new StoreHisListDataTable();
            base.Tables.Add(this.tableStoreHisList);
            this.tableSysLog = new SysLogDataTable();
            base.Tables.Add(this.tableSysLog);
            this.tableUnkeepList = new UnkeepListDataTable();
            base.Tables.Add(this.tableUnkeepList);
            this.tableSafeAlarm = new SafeAlarmDataTable();
            base.Tables.Add(this.tableSafeAlarm);
            this.tableStockDtl3 = new StockDtl3DataTable();
            base.Tables.Add(this.tableStockDtl3);
            this.tableWareCellCount = new WareCellCountDataTable();
            base.Tables.Add(this.tableWareCellCount);
            this.tableIOList_Ext = new IOList_ExtDataTable();
            base.Tables.Add(this.tableIOList_Ext);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDtl0() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDtl1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDtl2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDtl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoreHisList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSysLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnkeepList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSafeAlarm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDtl3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWareCellCount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIOList_Ext() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            rptDataSet ds = new rptDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StockDtl0RowChangeEventHandler(object sender, StockDtl0RowChangeEvent e);
        
        public delegate void StockDtl1RowChangeEventHandler(object sender, StockDtl1RowChangeEvent e);
        
        public delegate void StockDtl2RowChangeEventHandler(object sender, StockDtl2RowChangeEvent e);
        
        public delegate void StockDtlRowChangeEventHandler(object sender, StockDtlRowChangeEvent e);
        
        public delegate void StoreHisListRowChangeEventHandler(object sender, StoreHisListRowChangeEvent e);
        
        public delegate void SysLogRowChangeEventHandler(object sender, SysLogRowChangeEvent e);
        
        public delegate void UnkeepListRowChangeEventHandler(object sender, UnkeepListRowChangeEvent e);
        
        public delegate void SafeAlarmRowChangeEventHandler(object sender, SafeAlarmRowChangeEvent e);
        
        public delegate void StockDtl3RowChangeEventHandler(object sender, StockDtl3RowChangeEvent e);
        
        public delegate void WareCellCountRowChangeEventHandler(object sender, WareCellCountRowChangeEvent e);
        
        public delegate void IOList_ExtRowChangeEventHandler(object sender, IOList_ExtRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDtl0DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncItemId;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columnnStatus;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncBoxId;
            
            private global::System.Data.DataColumn columncPosId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0DataTable() {
                this.TableName = "StockDtl0";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl0DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDtl0DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cItemIdColumn {
                get {
                    return this.columncItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nStatusColumn {
                get {
                    return this.columnnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBoxIdColumn {
                get {
                    return this.columncBoxId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0Row this[int index] {
                get {
                    return ((StockDtl0Row)(this.Rows[index]));
                }
            }
            
            public event StockDtl0RowChangeEventHandler StockDtl0RowChanging;
            
            public event StockDtl0RowChangeEventHandler StockDtl0RowChanged;
            
            public event StockDtl0RowChangeEventHandler StockDtl0RowDeleting;
            
            public event StockDtl0RowChangeEventHandler StockDtl0RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDtl0Row(StockDtl0Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0Row AddStockDtl0Row(string cWHId, string cItemId, string cBatchNo, int cQCStatus, int nStatus, string cUnit, int fQty, string nPalletId, string cMName, string cSpec, string cBoxId, string cPosId) {
                StockDtl0Row rowStockDtl0Row = ((StockDtl0Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cWHId,
                        cItemId,
                        cBatchNo,
                        cQCStatus,
                        nStatus,
                        cUnit,
                        fQty,
                        nPalletId,
                        cMName,
                        cSpec,
                        cBoxId,
                        cPosId};
                rowStockDtl0Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDtl0Row);
                return rowStockDtl0Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDtl0DataTable cln = ((StockDtl0DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDtl0DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncWHId = base.Columns["cWHId"];
                this.columncItemId = base.Columns["cItemId"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columnnStatus = base.Columns["nStatus"];
                this.columncUnit = base.Columns["cUnit"];
                this.columnfQty = base.Columns["fQty"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncBoxId = base.Columns["cBoxId"];
                this.columncPosId = base.Columns["cPosId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncItemId = new global::System.Data.DataColumn("cItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncItemId);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columnnStatus = new global::System.Data.DataColumn("nStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnStatus);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncBoxId = new global::System.Data.DataColumn("cBoxId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBoxId);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0Row NewStockDtl0Row() {
                return ((StockDtl0Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDtl0Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDtl0Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDtl0RowChanged != null)) {
                    this.StockDtl0RowChanged(this, new StockDtl0RowChangeEvent(((StockDtl0Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDtl0RowChanging != null)) {
                    this.StockDtl0RowChanging(this, new StockDtl0RowChangeEvent(((StockDtl0Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDtl0RowDeleted != null)) {
                    this.StockDtl0RowDeleted(this, new StockDtl0RowChangeEvent(((StockDtl0Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDtl0RowDeleting != null)) {
                    this.StockDtl0RowDeleting(this, new StockDtl0RowChangeEvent(((StockDtl0Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDtl0Row(StockDtl0Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDtl0DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDtl1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncItemId;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columnnStatus;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncPosId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1DataTable() {
                this.TableName = "StockDtl1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDtl1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cItemIdColumn {
                get {
                    return this.columncItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nStatusColumn {
                get {
                    return this.columnnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1Row this[int index] {
                get {
                    return ((StockDtl1Row)(this.Rows[index]));
                }
            }
            
            public event StockDtl1RowChangeEventHandler StockDtl1RowChanging;
            
            public event StockDtl1RowChangeEventHandler StockDtl1RowChanged;
            
            public event StockDtl1RowChangeEventHandler StockDtl1RowDeleting;
            
            public event StockDtl1RowChangeEventHandler StockDtl1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDtl1Row(StockDtl1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1Row AddStockDtl1Row(string cWHId, string cItemId, string cBatchNo, int cQCStatus, int nStatus, string cUnit, int fQty, string nPalletId, string cMName, string cSpec, string cPosId) {
                StockDtl1Row rowStockDtl1Row = ((StockDtl1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cWHId,
                        cItemId,
                        cBatchNo,
                        cQCStatus,
                        nStatus,
                        cUnit,
                        fQty,
                        nPalletId,
                        cMName,
                        cSpec,
                        cPosId};
                rowStockDtl1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDtl1Row);
                return rowStockDtl1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDtl1DataTable cln = ((StockDtl1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDtl1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncWHId = base.Columns["cWHId"];
                this.columncItemId = base.Columns["cItemId"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columnnStatus = base.Columns["nStatus"];
                this.columncUnit = base.Columns["cUnit"];
                this.columnfQty = base.Columns["fQty"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncPosId = base.Columns["cPosId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncItemId = new global::System.Data.DataColumn("cItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncItemId);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columnnStatus = new global::System.Data.DataColumn("nStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnStatus);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1Row NewStockDtl1Row() {
                return ((StockDtl1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDtl1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDtl1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDtl1RowChanged != null)) {
                    this.StockDtl1RowChanged(this, new StockDtl1RowChangeEvent(((StockDtl1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDtl1RowChanging != null)) {
                    this.StockDtl1RowChanging(this, new StockDtl1RowChangeEvent(((StockDtl1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDtl1RowDeleted != null)) {
                    this.StockDtl1RowDeleted(this, new StockDtl1RowChangeEvent(((StockDtl1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDtl1RowDeleting != null)) {
                    this.StockDtl1RowDeleting(this, new StockDtl1RowChangeEvent(((StockDtl1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDtl1Row(StockDtl1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDtl1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDtl2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncItemId;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columnnQCStatus;
            
            private global::System.Data.DataColumn columnnStatus;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncSpec;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2DataTable() {
                this.TableName = "StockDtl2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDtl2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cItemIdColumn {
                get {
                    return this.columncItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nQCStatusColumn {
                get {
                    return this.columnnQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nStatusColumn {
                get {
                    return this.columnnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2Row this[int index] {
                get {
                    return ((StockDtl2Row)(this.Rows[index]));
                }
            }
            
            public event StockDtl2RowChangeEventHandler StockDtl2RowChanging;
            
            public event StockDtl2RowChangeEventHandler StockDtl2RowChanged;
            
            public event StockDtl2RowChangeEventHandler StockDtl2RowDeleting;
            
            public event StockDtl2RowChangeEventHandler StockDtl2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDtl2Row(StockDtl2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2Row AddStockDtl2Row(string cWHId, string cItemId, string cBatchNo, int nQCStatus, int nStatus, string cUnit, int fQty, string cName, string cSpec) {
                StockDtl2Row rowStockDtl2Row = ((StockDtl2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cWHId,
                        cItemId,
                        cBatchNo,
                        nQCStatus,
                        nStatus,
                        cUnit,
                        fQty,
                        cName,
                        cSpec};
                rowStockDtl2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDtl2Row);
                return rowStockDtl2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDtl2DataTable cln = ((StockDtl2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDtl2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncWHId = base.Columns["cWHId"];
                this.columncItemId = base.Columns["cItemId"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columnnQCStatus = base.Columns["nQCStatus"];
                this.columnnStatus = base.Columns["nStatus"];
                this.columncUnit = base.Columns["cUnit"];
                this.columnfQty = base.Columns["fQty"];
                this.columncName = base.Columns["cName"];
                this.columncSpec = base.Columns["cSpec"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncItemId = new global::System.Data.DataColumn("cItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncItemId);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columnnQCStatus = new global::System.Data.DataColumn("nQCStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnQCStatus);
                this.columnnStatus = new global::System.Data.DataColumn("nStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnStatus);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2Row NewStockDtl2Row() {
                return ((StockDtl2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDtl2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDtl2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDtl2RowChanged != null)) {
                    this.StockDtl2RowChanged(this, new StockDtl2RowChangeEvent(((StockDtl2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDtl2RowChanging != null)) {
                    this.StockDtl2RowChanging(this, new StockDtl2RowChangeEvent(((StockDtl2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDtl2RowDeleted != null)) {
                    this.StockDtl2RowDeleted(this, new StockDtl2RowChangeEvent(((StockDtl2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDtl2RowDeleting != null)) {
                    this.StockDtl2RowDeleting(this, new StockDtl2RowChangeEvent(((StockDtl2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDtl2Row(StockDtl2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDtl2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDtlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncMatStyle;
            
            private global::System.Data.DataColumn columncMatQCLevel;
            
            private global::System.Data.DataColumn columncMatOther;
            
            private global::System.Data.DataColumn columncRemark;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columndProdDate;
            
            private global::System.Data.DataColumn columndBadDate;
            
            private global::System.Data.DataColumn columncDtlCSId;
            
            private global::System.Data.DataColumn columncDtlSupplier;
            
            private global::System.Data.DataColumn columncStoreRemark;
            
            private global::System.Data.DataColumn columncBNoIn;
            
            private global::System.Data.DataColumn columnnItemIn;
            
            private global::System.Data.DataColumn columnnQCStatus;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncPosId;
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncAreaId;
            
            private global::System.Data.DataColumn columncAreaName;
            
            private global::System.Data.DataColumn columncABC;
            
            private global::System.Data.DataColumn columncWHName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlDataTable() {
                this.TableName = "StockDtl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDtlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatStyleColumn {
                get {
                    return this.columncMatStyle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatQCLevelColumn {
                get {
                    return this.columncMatQCLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatOtherColumn {
                get {
                    return this.columncMatOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cRemarkColumn {
                get {
                    return this.columncRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dProdDateColumn {
                get {
                    return this.columndProdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dBadDateColumn {
                get {
                    return this.columndBadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cDtlCSIdColumn {
                get {
                    return this.columncDtlCSId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cDtlSupplierColumn {
                get {
                    return this.columncDtlSupplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cStoreRemarkColumn {
                get {
                    return this.columncStoreRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoInColumn {
                get {
                    return this.columncBNoIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nItemInColumn {
                get {
                    return this.columnnItemIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nQCStatusColumn {
                get {
                    return this.columnnQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cAreaIdColumn {
                get {
                    return this.columncAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cAreaNameColumn {
                get {
                    return this.columncAreaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cABCColumn {
                get {
                    return this.columncABC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHNameColumn {
                get {
                    return this.columncWHName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlRow this[int index] {
                get {
                    return ((StockDtlRow)(this.Rows[index]));
                }
            }
            
            public event StockDtlRowChangeEventHandler StockDtlRowChanging;
            
            public event StockDtlRowChangeEventHandler StockDtlRowChanged;
            
            public event StockDtlRowChangeEventHandler StockDtlRowDeleting;
            
            public event StockDtlRowChangeEventHandler StockDtlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDtlRow(StockDtlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlRow AddStockDtlRow(
                        string cMNo, 
                        string cMName, 
                        string cSpec, 
                        string cMatStyle, 
                        string cMatQCLevel, 
                        string cMatOther, 
                        string cRemark, 
                        string cBatchNo, 
                        string fQty, 
                        string cUnit, 
                        string dProdDate, 
                        string dBadDate, 
                        string cDtlCSId, 
                        string cDtlSupplier, 
                        string cStoreRemark, 
                        string cBNoIn, 
                        string nItemIn, 
                        string nQCStatus, 
                        string cQCStatus, 
                        string nPalletId, 
                        string cPosId, 
                        string cWHId, 
                        string cAreaId, 
                        string cAreaName, 
                        string cABC, 
                        string cWHName) {
                StockDtlRow rowStockDtlRow = ((StockDtlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        cMName,
                        cSpec,
                        cMatStyle,
                        cMatQCLevel,
                        cMatOther,
                        cRemark,
                        cBatchNo,
                        fQty,
                        cUnit,
                        dProdDate,
                        dBadDate,
                        cDtlCSId,
                        cDtlSupplier,
                        cStoreRemark,
                        cBNoIn,
                        nItemIn,
                        nQCStatus,
                        cQCStatus,
                        nPalletId,
                        cPosId,
                        cWHId,
                        cAreaId,
                        cAreaName,
                        cABC,
                        cWHName};
                rowStockDtlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDtlRow);
                return rowStockDtlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDtlDataTable cln = ((StockDtlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDtlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncMatStyle = base.Columns["cMatStyle"];
                this.columncMatQCLevel = base.Columns["cMatQCLevel"];
                this.columncMatOther = base.Columns["cMatOther"];
                this.columncRemark = base.Columns["cRemark"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columnfQty = base.Columns["fQty"];
                this.columncUnit = base.Columns["cUnit"];
                this.columndProdDate = base.Columns["dProdDate"];
                this.columndBadDate = base.Columns["dBadDate"];
                this.columncDtlCSId = base.Columns["cDtlCSId"];
                this.columncDtlSupplier = base.Columns["cDtlSupplier"];
                this.columncStoreRemark = base.Columns["cStoreRemark"];
                this.columncBNoIn = base.Columns["cBNoIn"];
                this.columnnItemIn = base.Columns["nItemIn"];
                this.columnnQCStatus = base.Columns["nQCStatus"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncPosId = base.Columns["cPosId"];
                this.columncWHId = base.Columns["cWHId"];
                this.columncAreaId = base.Columns["cAreaId"];
                this.columncAreaName = base.Columns["cAreaName"];
                this.columncABC = base.Columns["cABC"];
                this.columncWHName = base.Columns["cWHName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncMatStyle = new global::System.Data.DataColumn("cMatStyle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatStyle);
                this.columncMatQCLevel = new global::System.Data.DataColumn("cMatQCLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatQCLevel);
                this.columncMatOther = new global::System.Data.DataColumn("cMatOther", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatOther);
                this.columncRemark = new global::System.Data.DataColumn("cRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncRemark);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columndProdDate = new global::System.Data.DataColumn("dProdDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndProdDate);
                this.columndBadDate = new global::System.Data.DataColumn("dBadDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndBadDate);
                this.columncDtlCSId = new global::System.Data.DataColumn("cDtlCSId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncDtlCSId);
                this.columncDtlSupplier = new global::System.Data.DataColumn("cDtlSupplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncDtlSupplier);
                this.columncStoreRemark = new global::System.Data.DataColumn("cStoreRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncStoreRemark);
                this.columncBNoIn = new global::System.Data.DataColumn("cBNoIn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNoIn);
                this.columnnItemIn = new global::System.Data.DataColumn("nItemIn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnItemIn);
                this.columnnQCStatus = new global::System.Data.DataColumn("nQCStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnQCStatus);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncAreaId = new global::System.Data.DataColumn("cAreaId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncAreaId);
                this.columncAreaName = new global::System.Data.DataColumn("cAreaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncAreaName);
                this.columncABC = new global::System.Data.DataColumn("cABC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncABC);
                this.columncWHName = new global::System.Data.DataColumn("cWHName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlRow NewStockDtlRow() {
                return ((StockDtlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDtlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDtlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDtlRowChanged != null)) {
                    this.StockDtlRowChanged(this, new StockDtlRowChangeEvent(((StockDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDtlRowChanging != null)) {
                    this.StockDtlRowChanging(this, new StockDtlRowChangeEvent(((StockDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDtlRowDeleted != null)) {
                    this.StockDtlRowDeleted(this, new StockDtlRowChangeEvent(((StockDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDtlRowDeleting != null)) {
                    this.StockDtlRowDeleting(this, new StockDtlRowChangeEvent(((StockDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDtlRow(StockDtlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDtlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoreHisListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncPosId;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columndOperateTime;
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncBType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListDataTable() {
                this.TableName = "StoreHisList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreHisListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoreHisListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dOperateTimeColumn {
                get {
                    return this.columndOperateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBTypeColumn {
                get {
                    return this.columncBType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListRow this[int index] {
                get {
                    return ((StoreHisListRow)(this.Rows[index]));
                }
            }
            
            public event StoreHisListRowChangeEventHandler StoreHisListRowChanging;
            
            public event StoreHisListRowChangeEventHandler StoreHisListRowChanged;
            
            public event StoreHisListRowChangeEventHandler StoreHisListRowDeleting;
            
            public event StoreHisListRowChangeEventHandler StoreHisListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoreHisListRow(StoreHisListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListRow AddStoreHisListRow(string cPosId, string nPalletId, string cMNo, string cMName, int fQty, System.DateTime dOperateTime, string cBNo, string cBType) {
                StoreHisListRow rowStoreHisListRow = ((StoreHisListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cPosId,
                        nPalletId,
                        cMNo,
                        cMName,
                        fQty,
                        dOperateTime,
                        cBNo,
                        cBType};
                rowStoreHisListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoreHisListRow);
                return rowStoreHisListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoreHisListDataTable cln = ((StoreHisListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoreHisListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncPosId = base.Columns["cPosId"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columnfQty = base.Columns["fQty"];
                this.columndOperateTime = base.Columns["dOperateTime"];
                this.columncBNo = base.Columns["cBNo"];
                this.columncBType = base.Columns["cBType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columndOperateTime = new global::System.Data.DataColumn("dOperateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndOperateTime);
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncBType = new global::System.Data.DataColumn("cBType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListRow NewStoreHisListRow() {
                return ((StoreHisListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoreHisListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoreHisListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoreHisListRowChanged != null)) {
                    this.StoreHisListRowChanged(this, new StoreHisListRowChangeEvent(((StoreHisListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoreHisListRowChanging != null)) {
                    this.StoreHisListRowChanging(this, new StoreHisListRowChangeEvent(((StoreHisListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoreHisListRowDeleted != null)) {
                    this.StoreHisListRowDeleted(this, new StoreHisListRowChangeEvent(((StoreHisListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoreHisListRowDeleting != null)) {
                    this.StoreHisListRowDeleting(this, new StoreHisListRowChangeEvent(((StoreHisListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoreHisListRow(StoreHisListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoreHisListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SysLogDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncUser;
            
            private global::System.Data.DataColumn columncSysFrom;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columncOptType;
            
            private global::System.Data.DataColumn columncRemark;
            
            private global::System.Data.DataColumn columncCmptId;
            
            private global::System.Data.DataColumn columnnId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogDataTable() {
                this.TableName = "SysLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SysLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUserColumn {
                get {
                    return this.columncUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSysFromColumn {
                get {
                    return this.columncSysFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cOptTypeColumn {
                get {
                    return this.columncOptType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cRemarkColumn {
                get {
                    return this.columncRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cCmptIdColumn {
                get {
                    return this.columncCmptId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nIdColumn {
                get {
                    return this.columnnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogRow this[int index] {
                get {
                    return ((SysLogRow)(this.Rows[index]));
                }
            }
            
            public event SysLogRowChangeEventHandler SysLogRowChanging;
            
            public event SysLogRowChangeEventHandler SysLogRowChanged;
            
            public event SysLogRowChangeEventHandler SysLogRowDeleting;
            
            public event SysLogRowChangeEventHandler SysLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSysLogRow(SysLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogRow AddSysLogRow(string cUser, string cSysFrom, System.DateTime dDate, string cOptType, string cRemark, string cCmptId, int nId) {
                SysLogRow rowSysLogRow = ((SysLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cUser,
                        cSysFrom,
                        dDate,
                        cOptType,
                        cRemark,
                        cCmptId,
                        nId};
                rowSysLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSysLogRow);
                return rowSysLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SysLogDataTable cln = ((SysLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SysLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncUser = base.Columns["cUser"];
                this.columncSysFrom = base.Columns["cSysFrom"];
                this.columndDate = base.Columns["dDate"];
                this.columncOptType = base.Columns["cOptType"];
                this.columncRemark = base.Columns["cRemark"];
                this.columncCmptId = base.Columns["cCmptId"];
                this.columnnId = base.Columns["nId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncUser = new global::System.Data.DataColumn("cUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUser);
                this.columncSysFrom = new global::System.Data.DataColumn("cSysFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSysFrom);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columncOptType = new global::System.Data.DataColumn("cOptType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncOptType);
                this.columncRemark = new global::System.Data.DataColumn("cRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncRemark);
                this.columncCmptId = new global::System.Data.DataColumn("cCmptId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncCmptId);
                this.columnnId = new global::System.Data.DataColumn("nId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogRow NewSysLogRow() {
                return ((SysLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SysLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SysLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SysLogRowChanged != null)) {
                    this.SysLogRowChanged(this, new SysLogRowChangeEvent(((SysLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SysLogRowChanging != null)) {
                    this.SysLogRowChanging(this, new SysLogRowChangeEvent(((SysLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SysLogRowDeleted != null)) {
                    this.SysLogRowDeleted(this, new SysLogRowChangeEvent(((SysLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SysLogRowDeleting != null)) {
                    this.SysLogRowDeleting(this, new SysLogRowChangeEvent(((SysLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSysLogRow(SysLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SysLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnkeepListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncItemId;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columndProdDate;
            
            private global::System.Data.DataColumn columnnKeepDay;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncPosId;
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncWHName;
            
            private global::System.Data.DataColumn columnbadDays;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListDataTable() {
                this.TableName = "UnkeepList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnkeepListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnkeepListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cItemIdColumn {
                get {
                    return this.columncItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dProdDateColumn {
                get {
                    return this.columndProdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nKeepDayColumn {
                get {
                    return this.columnnKeepDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHNameColumn {
                get {
                    return this.columncWHName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn badDaysColumn {
                get {
                    return this.columnbadDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListRow this[int index] {
                get {
                    return ((UnkeepListRow)(this.Rows[index]));
                }
            }
            
            public event UnkeepListRowChangeEventHandler UnkeepListRowChanging;
            
            public event UnkeepListRowChangeEventHandler UnkeepListRowChanged;
            
            public event UnkeepListRowChangeEventHandler UnkeepListRowDeleting;
            
            public event UnkeepListRowChangeEventHandler UnkeepListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnkeepListRow(UnkeepListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListRow AddUnkeepListRow(string cItemId, string cName, string cSpec, string cBatchNo, System.DateTime dProdDate, int nKeepDay, string nPalletId, string cPosId, string cWHId, string cWHName, string badDays) {
                UnkeepListRow rowUnkeepListRow = ((UnkeepListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cItemId,
                        cName,
                        cSpec,
                        cBatchNo,
                        dProdDate,
                        nKeepDay,
                        nPalletId,
                        cPosId,
                        cWHId,
                        cWHName,
                        badDays};
                rowUnkeepListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnkeepListRow);
                return rowUnkeepListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnkeepListDataTable cln = ((UnkeepListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnkeepListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncItemId = base.Columns["cItemId"];
                this.columncName = base.Columns["cName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columndProdDate = base.Columns["dProdDate"];
                this.columnnKeepDay = base.Columns["nKeepDay"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncPosId = base.Columns["cPosId"];
                this.columncWHId = base.Columns["cWHId"];
                this.columncWHName = base.Columns["cWHName"];
                this.columnbadDays = base.Columns["badDays"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncItemId = new global::System.Data.DataColumn("cItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncItemId);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columndProdDate = new global::System.Data.DataColumn("dProdDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndProdDate);
                this.columnnKeepDay = new global::System.Data.DataColumn("nKeepDay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnKeepDay);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncWHName = new global::System.Data.DataColumn("cWHName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHName);
                this.columnbadDays = new global::System.Data.DataColumn("badDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbadDays);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListRow NewUnkeepListRow() {
                return ((UnkeepListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnkeepListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnkeepListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnkeepListRowChanged != null)) {
                    this.UnkeepListRowChanged(this, new UnkeepListRowChangeEvent(((UnkeepListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnkeepListRowChanging != null)) {
                    this.UnkeepListRowChanging(this, new UnkeepListRowChangeEvent(((UnkeepListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnkeepListRowDeleted != null)) {
                    this.UnkeepListRowDeleted(this, new UnkeepListRowChangeEvent(((UnkeepListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnkeepListRowDeleting != null)) {
                    this.UnkeepListRowDeleting(this, new UnkeepListRowChangeEvent(((UnkeepListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnkeepListRow(UnkeepListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnkeepListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SafeAlarmDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columnfSafeQtyDn;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnfSafeQtyUp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmDataTable() {
                this.TableName = "SafeAlarm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SafeAlarmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SafeAlarmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fSafeQtyDnColumn {
                get {
                    return this.columnfSafeQtyDn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fSafeQtyUpColumn {
                get {
                    return this.columnfSafeQtyUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmRow this[int index] {
                get {
                    return ((SafeAlarmRow)(this.Rows[index]));
                }
            }
            
            public event SafeAlarmRowChangeEventHandler SafeAlarmRowChanging;
            
            public event SafeAlarmRowChangeEventHandler SafeAlarmRowChanged;
            
            public event SafeAlarmRowChangeEventHandler SafeAlarmRowDeleting;
            
            public event SafeAlarmRowChangeEventHandler SafeAlarmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSafeAlarmRow(SafeAlarmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmRow AddSafeAlarmRow(string cMNo, string cName, string cSpec, string cUnit, int fSafeQtyDn, int fQty, string fSafeQtyUp) {
                SafeAlarmRow rowSafeAlarmRow = ((SafeAlarmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        cName,
                        cSpec,
                        cUnit,
                        fSafeQtyDn,
                        fQty,
                        fSafeQtyUp};
                rowSafeAlarmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSafeAlarmRow);
                return rowSafeAlarmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SafeAlarmDataTable cln = ((SafeAlarmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SafeAlarmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columncName = base.Columns["cName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncUnit = base.Columns["cUnit"];
                this.columnfSafeQtyDn = base.Columns["fSafeQtyDn"];
                this.columnfQty = base.Columns["fQty"];
                this.columnfSafeQtyUp = base.Columns["fSafeQtyUp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columnfSafeQtyDn = new global::System.Data.DataColumn("fSafeQtyDn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfSafeQtyDn);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnfSafeQtyUp = new global::System.Data.DataColumn("fSafeQtyUp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfSafeQtyUp);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmRow NewSafeAlarmRow() {
                return ((SafeAlarmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SafeAlarmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SafeAlarmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SafeAlarmRowChanged != null)) {
                    this.SafeAlarmRowChanged(this, new SafeAlarmRowChangeEvent(((SafeAlarmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SafeAlarmRowChanging != null)) {
                    this.SafeAlarmRowChanging(this, new SafeAlarmRowChangeEvent(((SafeAlarmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SafeAlarmRowDeleted != null)) {
                    this.SafeAlarmRowDeleted(this, new SafeAlarmRowChangeEvent(((SafeAlarmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SafeAlarmRowDeleting != null)) {
                    this.SafeAlarmRowDeleting(this, new SafeAlarmRowChangeEvent(((SafeAlarmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSafeAlarmRow(SafeAlarmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SafeAlarmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDtl3DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncItemId;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columnnQCStatus;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncSpec;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3DataTable() {
                this.TableName = "StockDtl3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDtl3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cItemIdColumn {
                get {
                    return this.columncItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nQCStatusColumn {
                get {
                    return this.columnnQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3Row this[int index] {
                get {
                    return ((StockDtl3Row)(this.Rows[index]));
                }
            }
            
            public event StockDtl3RowChangeEventHandler StockDtl3RowChanging;
            
            public event StockDtl3RowChangeEventHandler StockDtl3RowChanged;
            
            public event StockDtl3RowChangeEventHandler StockDtl3RowDeleting;
            
            public event StockDtl3RowChangeEventHandler StockDtl3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDtl3Row(StockDtl3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3Row AddStockDtl3Row(string cItemId, string cBatchNo, int nQCStatus, string cUnit, double fQty, string cName, string cSpec) {
                StockDtl3Row rowStockDtl3Row = ((StockDtl3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cItemId,
                        cBatchNo,
                        nQCStatus,
                        cUnit,
                        fQty,
                        cName,
                        cSpec};
                rowStockDtl3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDtl3Row);
                return rowStockDtl3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDtl3DataTable cln = ((StockDtl3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDtl3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncItemId = base.Columns["cItemId"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columnnQCStatus = base.Columns["nQCStatus"];
                this.columncUnit = base.Columns["cUnit"];
                this.columnfQty = base.Columns["fQty"];
                this.columncName = base.Columns["cName"];
                this.columncSpec = base.Columns["cSpec"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncItemId = new global::System.Data.DataColumn("cItemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncItemId);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columnnQCStatus = new global::System.Data.DataColumn("nQCStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnQCStatus);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3Row NewStockDtl3Row() {
                return ((StockDtl3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDtl3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDtl3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDtl3RowChanged != null)) {
                    this.StockDtl3RowChanged(this, new StockDtl3RowChangeEvent(((StockDtl3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDtl3RowChanging != null)) {
                    this.StockDtl3RowChanging(this, new StockDtl3RowChangeEvent(((StockDtl3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDtl3RowDeleted != null)) {
                    this.StockDtl3RowDeleted(this, new StockDtl3RowChangeEvent(((StockDtl3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDtl3RowDeleting != null)) {
                    this.StockDtl3RowDeleting(this, new StockDtl3RowChangeEvent(((StockDtl3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDtl3Row(StockDtl3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDtl3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WareCellCountDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncWName;
            
            private global::System.Data.DataColumn columncAreaName;
            
            private global::System.Data.DataColumn columncWType;
            
            private global::System.Data.DataColumn columncPalletSpec;
            
            private global::System.Data.DataColumn columncStatusStore;
            
            private global::System.Data.DataColumn columnnCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountDataTable() {
                this.TableName = "WareCellCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WareCellCountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WareCellCountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWNameColumn {
                get {
                    return this.columncWName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cAreaNameColumn {
                get {
                    return this.columncAreaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWTypeColumn {
                get {
                    return this.columncWType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPalletSpecColumn {
                get {
                    return this.columncPalletSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cStatusStoreColumn {
                get {
                    return this.columncStatusStore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nCountColumn {
                get {
                    return this.columnnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountRow this[int index] {
                get {
                    return ((WareCellCountRow)(this.Rows[index]));
                }
            }
            
            public event WareCellCountRowChangeEventHandler WareCellCountRowChanging;
            
            public event WareCellCountRowChangeEventHandler WareCellCountRowChanged;
            
            public event WareCellCountRowChangeEventHandler WareCellCountRowDeleting;
            
            public event WareCellCountRowChangeEventHandler WareCellCountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWareCellCountRow(WareCellCountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountRow AddWareCellCountRow(string cWHId, string cWName, string cAreaName, string cWType, string cPalletSpec, string cStatusStore, int nCount) {
                WareCellCountRow rowWareCellCountRow = ((WareCellCountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cWHId,
                        cWName,
                        cAreaName,
                        cWType,
                        cPalletSpec,
                        cStatusStore,
                        nCount};
                rowWareCellCountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWareCellCountRow);
                return rowWareCellCountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WareCellCountDataTable cln = ((WareCellCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WareCellCountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncWHId = base.Columns["cWHId"];
                this.columncWName = base.Columns["cWName"];
                this.columncAreaName = base.Columns["cAreaName"];
                this.columncWType = base.Columns["cWType"];
                this.columncPalletSpec = base.Columns["cPalletSpec"];
                this.columncStatusStore = base.Columns["cStatusStore"];
                this.columnnCount = base.Columns["nCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncWName = new global::System.Data.DataColumn("cWName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWName);
                this.columncAreaName = new global::System.Data.DataColumn("cAreaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncAreaName);
                this.columncWType = new global::System.Data.DataColumn("cWType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWType);
                this.columncPalletSpec = new global::System.Data.DataColumn("cPalletSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPalletSpec);
                this.columncStatusStore = new global::System.Data.DataColumn("cStatusStore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncStatusStore);
                this.columnnCount = new global::System.Data.DataColumn("nCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnCount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountRow NewWareCellCountRow() {
                return ((WareCellCountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WareCellCountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WareCellCountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WareCellCountRowChanged != null)) {
                    this.WareCellCountRowChanged(this, new WareCellCountRowChangeEvent(((WareCellCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WareCellCountRowChanging != null)) {
                    this.WareCellCountRowChanging(this, new WareCellCountRowChangeEvent(((WareCellCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WareCellCountRowDeleted != null)) {
                    this.WareCellCountRowDeleted(this, new WareCellCountRowChangeEvent(((WareCellCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WareCellCountRowDeleting != null)) {
                    this.WareCellCountRowDeleting(this, new WareCellCountRowChangeEvent(((WareCellCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWareCellCountRow(WareCellCountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WareCellCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IOList_ExtDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncFileNo;
            
            private global::System.Data.DataColumn columncFileName;
            
            private global::System.Data.DataColumn columncEventType;
            
            private global::System.Data.DataColumn columndEventTime;
            
            private global::System.Data.DataColumn columncEventAddr;
            
            private global::System.Data.DataColumn columncStartLevel;
            
            private global::System.Data.DataColumn columncMatClass;
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncBType;
            
            private global::System.Data.DataColumn columncDept;
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtDataTable() {
                this.TableName = "IOList_Ext";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IOList_ExtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IOList_ExtDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cFileNoColumn {
                get {
                    return this.columncFileNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cFileNameColumn {
                get {
                    return this.columncFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cEventTypeColumn {
                get {
                    return this.columncEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dEventTimeColumn {
                get {
                    return this.columndEventTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cEventAddrColumn {
                get {
                    return this.columncEventAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cStartLevelColumn {
                get {
                    return this.columncStartLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatClassColumn {
                get {
                    return this.columncMatClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBTypeColumn {
                get {
                    return this.columncBType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cDeptColumn {
                get {
                    return this.columncDept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtRow this[int index] {
                get {
                    return ((IOList_ExtRow)(this.Rows[index]));
                }
            }
            
            public event IOList_ExtRowChangeEventHandler IOList_ExtRowChanging;
            
            public event IOList_ExtRowChangeEventHandler IOList_ExtRowChanged;
            
            public event IOList_ExtRowChangeEventHandler IOList_ExtRowDeleting;
            
            public event IOList_ExtRowChangeEventHandler IOList_ExtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIOList_ExtRow(IOList_ExtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtRow AddIOList_ExtRow(
                        string cFileNo, 
                        string cFileName, 
                        string cEventType, 
                        string dEventTime, 
                        string cEventAddr, 
                        string cStartLevel, 
                        string cMatClass, 
                        string cBNo, 
                        string cBType, 
                        string cDept, 
                        string cWHId, 
                        string cMNo, 
                        string cMName, 
                        string cSpec, 
                        double fQty, 
                        string cUnit) {
                IOList_ExtRow rowIOList_ExtRow = ((IOList_ExtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cFileNo,
                        cFileName,
                        cEventType,
                        dEventTime,
                        cEventAddr,
                        cStartLevel,
                        cMatClass,
                        cBNo,
                        cBType,
                        cDept,
                        cWHId,
                        cMNo,
                        cMName,
                        cSpec,
                        fQty,
                        cUnit};
                rowIOList_ExtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIOList_ExtRow);
                return rowIOList_ExtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IOList_ExtDataTable cln = ((IOList_ExtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IOList_ExtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncFileNo = base.Columns["cFileNo"];
                this.columncFileName = base.Columns["cFileName"];
                this.columncEventType = base.Columns["cEventType"];
                this.columndEventTime = base.Columns["dEventTime"];
                this.columncEventAddr = base.Columns["cEventAddr"];
                this.columncStartLevel = base.Columns["cStartLevel"];
                this.columncMatClass = base.Columns["cMatClass"];
                this.columncBNo = base.Columns["cBNo"];
                this.columncBType = base.Columns["cBType"];
                this.columncDept = base.Columns["cDept"];
                this.columncWHId = base.Columns["cWHId"];
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columnfQty = base.Columns["fQty"];
                this.columncUnit = base.Columns["cUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncFileNo = new global::System.Data.DataColumn("cFileNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncFileNo);
                this.columncFileName = new global::System.Data.DataColumn("cFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncFileName);
                this.columncEventType = new global::System.Data.DataColumn("cEventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncEventType);
                this.columndEventTime = new global::System.Data.DataColumn("dEventTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndEventTime);
                this.columncEventAddr = new global::System.Data.DataColumn("cEventAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncEventAddr);
                this.columncStartLevel = new global::System.Data.DataColumn("cStartLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncStartLevel);
                this.columncMatClass = new global::System.Data.DataColumn("cMatClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatClass);
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncBType = new global::System.Data.DataColumn("cBType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBType);
                this.columncDept = new global::System.Data.DataColumn("cDept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncDept);
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtRow NewIOList_ExtRow() {
                return ((IOList_ExtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IOList_ExtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IOList_ExtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IOList_ExtRowChanged != null)) {
                    this.IOList_ExtRowChanged(this, new IOList_ExtRowChangeEvent(((IOList_ExtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IOList_ExtRowChanging != null)) {
                    this.IOList_ExtRowChanging(this, new IOList_ExtRowChangeEvent(((IOList_ExtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IOList_ExtRowDeleted != null)) {
                    this.IOList_ExtRowDeleted(this, new IOList_ExtRowChangeEvent(((IOList_ExtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IOList_ExtRowDeleting != null)) {
                    this.IOList_ExtRowDeleting(this, new IOList_ExtRowChangeEvent(((IOList_ExtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIOList_ExtRow(IOList_ExtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                rptDataSet ds = new rptDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IOList_ExtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDtl0Row : global::System.Data.DataRow {
            
            private StockDtl0DataTable tableStockDtl0;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl0Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDtl0 = ((StockDtl0DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cItemId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cItemId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cQCStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl0.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl0.nStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“nStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.nStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fQty {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl0.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBoxId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cBoxIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cBoxId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cBoxIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl0.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl0”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl0.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableStockDtl0.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableStockDtl0.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscItemIdNull() {
                return this.IsNull(this.tableStockDtl0.cItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcItemIdNull() {
                this[this.tableStockDtl0.cItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableStockDtl0.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableStockDtl0.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tableStockDtl0.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tableStockDtl0.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnStatusNull() {
                return this.IsNull(this.tableStockDtl0.nStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnStatusNull() {
                this[this.tableStockDtl0.nStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableStockDtl0.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableStockDtl0.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStockDtl0.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStockDtl0.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableStockDtl0.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableStockDtl0.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableStockDtl0.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableStockDtl0.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableStockDtl0.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableStockDtl0.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBoxIdNull() {
                return this.IsNull(this.tableStockDtl0.cBoxIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBoxIdNull() {
                this[this.tableStockDtl0.cBoxIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableStockDtl0.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableStockDtl0.cPosIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDtl1Row : global::System.Data.DataRow {
            
            private StockDtl1DataTable tableStockDtl1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDtl1 = ((StockDtl1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cItemId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cItemId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cQCStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl1.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl1.nStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“nStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.nStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fQty {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl1.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl1.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl1”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl1.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableStockDtl1.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableStockDtl1.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscItemIdNull() {
                return this.IsNull(this.tableStockDtl1.cItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcItemIdNull() {
                this[this.tableStockDtl1.cItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableStockDtl1.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableStockDtl1.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tableStockDtl1.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tableStockDtl1.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnStatusNull() {
                return this.IsNull(this.tableStockDtl1.nStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnStatusNull() {
                this[this.tableStockDtl1.nStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableStockDtl1.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableStockDtl1.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStockDtl1.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStockDtl1.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableStockDtl1.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableStockDtl1.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableStockDtl1.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableStockDtl1.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableStockDtl1.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableStockDtl1.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableStockDtl1.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableStockDtl1.cPosIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDtl2Row : global::System.Data.DataRow {
            
            private StockDtl2DataTable tableStockDtl2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDtl2 = ((StockDtl2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cItemId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cItemId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nQCStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl2.nQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“nQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.nQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl2.nStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“nStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.nStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fQty {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl2.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl2.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl2”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl2.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableStockDtl2.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableStockDtl2.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscItemIdNull() {
                return this.IsNull(this.tableStockDtl2.cItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcItemIdNull() {
                this[this.tableStockDtl2.cItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableStockDtl2.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableStockDtl2.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnQCStatusNull() {
                return this.IsNull(this.tableStockDtl2.nQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnQCStatusNull() {
                this[this.tableStockDtl2.nQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnStatusNull() {
                return this.IsNull(this.tableStockDtl2.nStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnStatusNull() {
                this[this.tableStockDtl2.nStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableStockDtl2.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableStockDtl2.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStockDtl2.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStockDtl2.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tableStockDtl2.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tableStockDtl2.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableStockDtl2.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableStockDtl2.cSpecColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDtlRow : global::System.Data.DataRow {
            
            private StockDtlDataTable tableStockDtl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDtl = ((StockDtlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatStyle {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cMatStyleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cMatStyle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cMatStyleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatQCLevel {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cMatQCLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cMatQCLevel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cMatQCLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatOther {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cMatOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cMatOther”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cMatOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cRemark {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dProdDate {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.dProdDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“dProdDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.dProdDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dBadDate {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.dBadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“dBadDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.dBadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cDtlCSId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cDtlCSIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cDtlCSId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cDtlCSIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cDtlSupplier {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cDtlSupplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cDtlSupplier”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cDtlSupplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cStoreRemark {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cStoreRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cStoreRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cStoreRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNoIn {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cBNoInColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cBNoIn”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cBNoInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nItemIn {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.nItemInColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“nItemIn”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.nItemInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nQCStatus {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.nQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“nQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.nQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQCStatus {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cAreaId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cAreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cAreaId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cAreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cAreaName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cAreaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cAreaName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cAreaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cABC {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cABCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cABC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cABCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl.cWHNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl”中列“cWHName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl.cWHNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableStockDtl.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableStockDtl.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableStockDtl.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableStockDtl.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableStockDtl.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableStockDtl.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatStyleNull() {
                return this.IsNull(this.tableStockDtl.cMatStyleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatStyleNull() {
                this[this.tableStockDtl.cMatStyleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatQCLevelNull() {
                return this.IsNull(this.tableStockDtl.cMatQCLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatQCLevelNull() {
                this[this.tableStockDtl.cMatQCLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatOtherNull() {
                return this.IsNull(this.tableStockDtl.cMatOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatOtherNull() {
                this[this.tableStockDtl.cMatOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscRemarkNull() {
                return this.IsNull(this.tableStockDtl.cRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcRemarkNull() {
                this[this.tableStockDtl.cRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableStockDtl.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableStockDtl.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStockDtl.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStockDtl.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableStockDtl.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableStockDtl.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdProdDateNull() {
                return this.IsNull(this.tableStockDtl.dProdDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdProdDateNull() {
                this[this.tableStockDtl.dProdDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdBadDateNull() {
                return this.IsNull(this.tableStockDtl.dBadDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdBadDateNull() {
                this[this.tableStockDtl.dBadDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscDtlCSIdNull() {
                return this.IsNull(this.tableStockDtl.cDtlCSIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcDtlCSIdNull() {
                this[this.tableStockDtl.cDtlCSIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscDtlSupplierNull() {
                return this.IsNull(this.tableStockDtl.cDtlSupplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcDtlSupplierNull() {
                this[this.tableStockDtl.cDtlSupplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscStoreRemarkNull() {
                return this.IsNull(this.tableStockDtl.cStoreRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcStoreRemarkNull() {
                this[this.tableStockDtl.cStoreRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoInNull() {
                return this.IsNull(this.tableStockDtl.cBNoInColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoInNull() {
                this[this.tableStockDtl.cBNoInColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnItemInNull() {
                return this.IsNull(this.tableStockDtl.nItemInColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnItemInNull() {
                this[this.tableStockDtl.nItemInColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnQCStatusNull() {
                return this.IsNull(this.tableStockDtl.nQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnQCStatusNull() {
                this[this.tableStockDtl.nQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tableStockDtl.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tableStockDtl.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableStockDtl.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableStockDtl.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableStockDtl.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableStockDtl.cPosIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableStockDtl.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableStockDtl.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscAreaIdNull() {
                return this.IsNull(this.tableStockDtl.cAreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcAreaIdNull() {
                this[this.tableStockDtl.cAreaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscAreaNameNull() {
                return this.IsNull(this.tableStockDtl.cAreaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcAreaNameNull() {
                this[this.tableStockDtl.cAreaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscABCNull() {
                return this.IsNull(this.tableStockDtl.cABCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcABCNull() {
                this[this.tableStockDtl.cABCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHNameNull() {
                return this.IsNull(this.tableStockDtl.cWHNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHNameNull() {
                this[this.tableStockDtl.cWHNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoreHisListRow : global::System.Data.DataRow {
            
            private StoreHisListDataTable tableStoreHisList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreHisListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoreHisList = ((StoreHisListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fQty {
                get {
                    try {
                        return ((int)(this[this.tableStoreHisList.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dOperateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStoreHisList.dOperateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“dOperateTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.dOperateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBType {
                get {
                    try {
                        return ((string)(this[this.tableStoreHisList.cBTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StoreHisList”中列“cBType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStoreHisList.cBTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableStoreHisList.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableStoreHisList.cPosIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableStoreHisList.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableStoreHisList.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableStoreHisList.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableStoreHisList.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableStoreHisList.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableStoreHisList.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStoreHisList.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStoreHisList.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdOperateTimeNull() {
                return this.IsNull(this.tableStoreHisList.dOperateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdOperateTimeNull() {
                this[this.tableStoreHisList.dOperateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tableStoreHisList.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tableStoreHisList.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBTypeNull() {
                return this.IsNull(this.tableStoreHisList.cBTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBTypeNull() {
                this[this.tableStoreHisList.cBTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SysLogRow : global::System.Data.DataRow {
            
            private SysLogDataTable tableSysLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSysLog = ((SysLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUser {
                get {
                    try {
                        return ((string)(this[this.tableSysLog.cUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“cUser”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.cUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSysFrom {
                get {
                    try {
                        return ((string)(this[this.tableSysLog.cSysFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“cSysFrom”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.cSysFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSysLog.dDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“dDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cOptType {
                get {
                    try {
                        return ((string)(this[this.tableSysLog.cOptTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“cOptType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.cOptTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cRemark {
                get {
                    try {
                        return ((string)(this[this.tableSysLog.cRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“cRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.cRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cCmptId {
                get {
                    try {
                        return ((string)(this[this.tableSysLog.cCmptIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“cCmptId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.cCmptIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nId {
                get {
                    try {
                        return ((int)(this[this.tableSysLog.nIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SysLog”中列“nId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSysLog.nIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUserNull() {
                return this.IsNull(this.tableSysLog.cUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUserNull() {
                this[this.tableSysLog.cUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSysFromNull() {
                return this.IsNull(this.tableSysLog.cSysFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSysFromNull() {
                this[this.tableSysLog.cSysFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdDateNull() {
                return this.IsNull(this.tableSysLog.dDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdDateNull() {
                this[this.tableSysLog.dDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscOptTypeNull() {
                return this.IsNull(this.tableSysLog.cOptTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcOptTypeNull() {
                this[this.tableSysLog.cOptTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscRemarkNull() {
                return this.IsNull(this.tableSysLog.cRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcRemarkNull() {
                this[this.tableSysLog.cRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscCmptIdNull() {
                return this.IsNull(this.tableSysLog.cCmptIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcCmptIdNull() {
                this[this.tableSysLog.cCmptIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnIdNull() {
                return this.IsNull(this.tableSysLog.nIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnIdNull() {
                this[this.tableSysLog.nIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnkeepListRow : global::System.Data.DataRow {
            
            private UnkeepListDataTable tableUnkeepList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnkeepListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnkeepList = ((UnkeepListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cItemId {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cItemId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dProdDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnkeepList.dProdDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“dProdDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.dProdDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nKeepDay {
                get {
                    try {
                        return ((int)(this[this.tableUnkeepList.nKeepDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“nKeepDay”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.nKeepDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHName {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.cWHNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“cWHName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.cWHNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string badDays {
                get {
                    try {
                        return ((string)(this[this.tableUnkeepList.badDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UnkeepList”中列“badDays”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUnkeepList.badDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscItemIdNull() {
                return this.IsNull(this.tableUnkeepList.cItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcItemIdNull() {
                this[this.tableUnkeepList.cItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tableUnkeepList.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tableUnkeepList.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableUnkeepList.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableUnkeepList.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableUnkeepList.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableUnkeepList.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdProdDateNull() {
                return this.IsNull(this.tableUnkeepList.dProdDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdProdDateNull() {
                this[this.tableUnkeepList.dProdDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnKeepDayNull() {
                return this.IsNull(this.tableUnkeepList.nKeepDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnKeepDayNull() {
                this[this.tableUnkeepList.nKeepDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableUnkeepList.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableUnkeepList.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableUnkeepList.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableUnkeepList.cPosIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableUnkeepList.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableUnkeepList.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHNameNull() {
                return this.IsNull(this.tableUnkeepList.cWHNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHNameNull() {
                this[this.tableUnkeepList.cWHNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbadDaysNull() {
                return this.IsNull(this.tableUnkeepList.badDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbadDaysNull() {
                this[this.tableUnkeepList.badDaysColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SafeAlarmRow : global::System.Data.DataRow {
            
            private SafeAlarmDataTable tableSafeAlarm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SafeAlarmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSafeAlarm = ((SafeAlarmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableSafeAlarm.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tableSafeAlarm.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“cName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableSafeAlarm.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableSafeAlarm.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fSafeQtyDn {
                get {
                    try {
                        return ((int)(this[this.tableSafeAlarm.fSafeQtyDnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“fSafeQtyDn”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.fSafeQtyDnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fQty {
                get {
                    try {
                        return ((int)(this[this.tableSafeAlarm.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fSafeQtyUp {
                get {
                    try {
                        return ((string)(this[this.tableSafeAlarm.fSafeQtyUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SafeAlarm”中列“fSafeQtyUp”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSafeAlarm.fSafeQtyUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableSafeAlarm.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableSafeAlarm.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tableSafeAlarm.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tableSafeAlarm.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableSafeAlarm.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableSafeAlarm.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableSafeAlarm.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableSafeAlarm.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfSafeQtyDnNull() {
                return this.IsNull(this.tableSafeAlarm.fSafeQtyDnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfSafeQtyDnNull() {
                this[this.tableSafeAlarm.fSafeQtyDnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableSafeAlarm.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableSafeAlarm.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfSafeQtyUpNull() {
                return this.IsNull(this.tableSafeAlarm.fSafeQtyUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfSafeQtyUpNull() {
                this[this.tableSafeAlarm.fSafeQtyUpColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDtl3Row : global::System.Data.DataRow {
            
            private StockDtl3DataTable tableStockDtl3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDtl3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDtl3 = ((StockDtl3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cItemId {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl3.cItemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“cItemId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.cItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl3.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nQCStatus {
                get {
                    try {
                        return ((int)(this[this.tableStockDtl3.nQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“nQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.nQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl3.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fQty {
                get {
                    try {
                        return ((double)(this[this.tableStockDtl3.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl3.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“cName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableStockDtl3.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“StockDtl3”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableStockDtl3.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscItemIdNull() {
                return this.IsNull(this.tableStockDtl3.cItemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcItemIdNull() {
                this[this.tableStockDtl3.cItemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableStockDtl3.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableStockDtl3.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnQCStatusNull() {
                return this.IsNull(this.tableStockDtl3.nQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnQCStatusNull() {
                this[this.tableStockDtl3.nQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableStockDtl3.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableStockDtl3.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableStockDtl3.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableStockDtl3.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tableStockDtl3.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tableStockDtl3.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableStockDtl3.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableStockDtl3.cSpecColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WareCellCountRow : global::System.Data.DataRow {
            
            private WareCellCountDataTable tableWareCellCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WareCellCountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWareCellCount = ((WareCellCountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWName {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cWNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cWName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cWNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cAreaName {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cAreaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cAreaName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cAreaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWType {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cWTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cWType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cWTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPalletSpec {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cPalletSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cPalletSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cPalletSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cStatusStore {
                get {
                    try {
                        return ((string)(this[this.tableWareCellCount.cStatusStoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“cStatusStore”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.cStatusStoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nCount {
                get {
                    try {
                        return ((int)(this[this.tableWareCellCount.nCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“WareCellCount”中列“nCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableWareCellCount.nCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableWareCellCount.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableWareCellCount.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWNameNull() {
                return this.IsNull(this.tableWareCellCount.cWNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWNameNull() {
                this[this.tableWareCellCount.cWNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscAreaNameNull() {
                return this.IsNull(this.tableWareCellCount.cAreaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcAreaNameNull() {
                this[this.tableWareCellCount.cAreaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWTypeNull() {
                return this.IsNull(this.tableWareCellCount.cWTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWTypeNull() {
                this[this.tableWareCellCount.cWTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPalletSpecNull() {
                return this.IsNull(this.tableWareCellCount.cPalletSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPalletSpecNull() {
                this[this.tableWareCellCount.cPalletSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscStatusStoreNull() {
                return this.IsNull(this.tableWareCellCount.cStatusStoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcStatusStoreNull() {
                this[this.tableWareCellCount.cStatusStoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnCountNull() {
                return this.IsNull(this.tableWareCellCount.nCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnCountNull() {
                this[this.tableWareCellCount.nCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IOList_ExtRow : global::System.Data.DataRow {
            
            private IOList_ExtDataTable tableIOList_Ext;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IOList_ExtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIOList_Ext = ((IOList_ExtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cFileNo {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cFileNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cFileNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cFileNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cFileName {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cFileName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cEventType {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cEventTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cEventType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cEventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dEventTime {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.dEventTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“dEventTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.dEventTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cEventAddr {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cEventAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cEventAddr”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cEventAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cStartLevel {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cStartLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cStartLevel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cStartLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatClass {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cMatClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cMatClass”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cMatClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBType {
                get {
                    if (this.IscBTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableIOList_Ext.cBTypeColumn]));
                    }
                }
                set {
                    this[this.tableIOList_Ext.cBTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cDept {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cDeptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cDept”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cDeptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fQty {
                get {
                    try {
                        return ((double)(this[this.tableIOList_Ext.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableIOList_Ext.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IOList_Ext”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIOList_Ext.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscFileNoNull() {
                return this.IsNull(this.tableIOList_Ext.cFileNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcFileNoNull() {
                this[this.tableIOList_Ext.cFileNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscFileNameNull() {
                return this.IsNull(this.tableIOList_Ext.cFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcFileNameNull() {
                this[this.tableIOList_Ext.cFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscEventTypeNull() {
                return this.IsNull(this.tableIOList_Ext.cEventTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcEventTypeNull() {
                this[this.tableIOList_Ext.cEventTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdEventTimeNull() {
                return this.IsNull(this.tableIOList_Ext.dEventTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdEventTimeNull() {
                this[this.tableIOList_Ext.dEventTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscEventAddrNull() {
                return this.IsNull(this.tableIOList_Ext.cEventAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcEventAddrNull() {
                this[this.tableIOList_Ext.cEventAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscStartLevelNull() {
                return this.IsNull(this.tableIOList_Ext.cStartLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcStartLevelNull() {
                this[this.tableIOList_Ext.cStartLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatClassNull() {
                return this.IsNull(this.tableIOList_Ext.cMatClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatClassNull() {
                this[this.tableIOList_Ext.cMatClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tableIOList_Ext.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tableIOList_Ext.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBTypeNull() {
                return this.IsNull(this.tableIOList_Ext.cBTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBTypeNull() {
                this[this.tableIOList_Ext.cBTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscDeptNull() {
                return this.IsNull(this.tableIOList_Ext.cDeptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcDeptNull() {
                this[this.tableIOList_Ext.cDeptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tableIOList_Ext.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tableIOList_Ext.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableIOList_Ext.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableIOList_Ext.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableIOList_Ext.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableIOList_Ext.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableIOList_Ext.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableIOList_Ext.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableIOList_Ext.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableIOList_Ext.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableIOList_Ext.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableIOList_Ext.cUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDtl0RowChangeEvent : global::System.EventArgs {
            
            private StockDtl0Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0RowChangeEvent(StockDtl0Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl0Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDtl1RowChangeEvent : global::System.EventArgs {
            
            private StockDtl1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1RowChangeEvent(StockDtl1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDtl2RowChangeEvent : global::System.EventArgs {
            
            private StockDtl2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2RowChangeEvent(StockDtl2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDtlRowChangeEvent : global::System.EventArgs {
            
            private StockDtlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlRowChangeEvent(StockDtlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoreHisListRowChangeEvent : global::System.EventArgs {
            
            private StoreHisListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListRowChangeEvent(StoreHisListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreHisListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SysLogRowChangeEvent : global::System.EventArgs {
            
            private SysLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogRowChangeEvent(SysLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnkeepListRowChangeEvent : global::System.EventArgs {
            
            private UnkeepListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListRowChangeEvent(UnkeepListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnkeepListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SafeAlarmRowChangeEvent : global::System.EventArgs {
            
            private SafeAlarmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmRowChangeEvent(SafeAlarmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SafeAlarmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDtl3RowChangeEvent : global::System.EventArgs {
            
            private StockDtl3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3RowChangeEvent(StockDtl3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDtl3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WareCellCountRowChangeEvent : global::System.EventArgs {
            
            private WareCellCountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountRowChangeEvent(WareCellCountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WareCellCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IOList_ExtRowChangeEvent : global::System.EventArgs {
            
            private IOList_ExtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtRowChangeEvent(IOList_ExtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IOList_ExtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
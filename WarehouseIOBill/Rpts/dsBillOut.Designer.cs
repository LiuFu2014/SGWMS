//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WarehouseIOBill.Rpts {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsBillOut")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsBillOut : global::System.Data.DataSet {
        
        private BillOutDataTable tableBillOut;
        
        private BillOutDtlDataTable tableBillOutDtl;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsBillOut() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsBillOut(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BillOut"] != null)) {
                    base.Tables.Add(new BillOutDataTable(ds.Tables["BillOut"]));
                }
                if ((ds.Tables["BillOutDtl"] != null)) {
                    base.Tables.Add(new BillOutDtlDataTable(ds.Tables["BillOutDtl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BillOutDataTable BillOut {
            get {
                return this.tableBillOut;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BillOutDtlDataTable BillOutDtl {
            get {
                return this.tableBillOutDtl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsBillOut cln = ((dsBillOut)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BillOut"] != null)) {
                    base.Tables.Add(new BillOutDataTable(ds.Tables["BillOut"]));
                }
                if ((ds.Tables["BillOutDtl"] != null)) {
                    base.Tables.Add(new BillOutDtlDataTable(ds.Tables["BillOutDtl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBillOut = ((BillOutDataTable)(base.Tables["BillOut"]));
            if ((initTable == true)) {
                if ((this.tableBillOut != null)) {
                    this.tableBillOut.InitVars();
                }
            }
            this.tableBillOutDtl = ((BillOutDtlDataTable)(base.Tables["BillOutDtl"]));
            if ((initTable == true)) {
                if ((this.tableBillOutDtl != null)) {
                    this.tableBillOutDtl.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsBillOut";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsBillOut.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBillOut = new BillOutDataTable();
            base.Tables.Add(this.tableBillOut);
            this.tableBillOutDtl = new BillOutDtlDataTable();
            base.Tables.Add(this.tableBillOutDtl);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBillOut() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBillOutDtl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsBillOut ds = new dsBillOut();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BillOutRowChangeEventHandler(object sender, BillOutRowChangeEvent e);
        
        public delegate void BillOutDtlRowChangeEventHandler(object sender, BillOutDtlRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BillOutDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncBClass;
            
            private global::System.Data.DataColumn columncBType;
            
            private global::System.Data.DataColumn columncDept;
            
            private global::System.Data.DataColumn columncPayer;
            
            private global::System.Data.DataColumn columncRemark;
            
            private global::System.Data.DataColumn columncChecker;
            
            private global::System.Data.DataColumn columncStatus;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columncIsChecked;
            
            private global::System.Data.DataColumn columncIsFinished;
            
            private global::System.Data.DataColumn columncLinkId;
            
            private global::System.Data.DataColumn columncFileNo;
            
            private global::System.Data.DataColumn columncFileName;
            
            private global::System.Data.DataColumn columncEventAddr;
            
            private global::System.Data.DataColumn columndEventTime;
            
            private global::System.Data.DataColumn columncEventType;
            
            private global::System.Data.DataColumn columncEventLevel;
            
            private global::System.Data.DataColumn columncStartLevel;
            
            private global::System.Data.DataColumn columncMatClass;
            
            private global::System.Data.DataColumn columncMatUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDataTable() {
                this.TableName = "BillOut";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BillOutDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BillOutDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBClassColumn {
                get {
                    return this.columncBClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBTypeColumn {
                get {
                    return this.columncBType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cDeptColumn {
                get {
                    return this.columncDept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPayerColumn {
                get {
                    return this.columncPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cRemarkColumn {
                get {
                    return this.columncRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cCheckerColumn {
                get {
                    return this.columncChecker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cStatusColumn {
                get {
                    return this.columncStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cIsCheckedColumn {
                get {
                    return this.columncIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cIsFinishedColumn {
                get {
                    return this.columncIsFinished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cLinkIdColumn {
                get {
                    return this.columncLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cFileNoColumn {
                get {
                    return this.columncFileNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cFileNameColumn {
                get {
                    return this.columncFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cEventAddrColumn {
                get {
                    return this.columncEventAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dEventTimeColumn {
                get {
                    return this.columndEventTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cEventTypeColumn {
                get {
                    return this.columncEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cEventLevelColumn {
                get {
                    return this.columncEventLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cStartLevelColumn {
                get {
                    return this.columncStartLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatClassColumn {
                get {
                    return this.columncMatClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatUnitColumn {
                get {
                    return this.columncMatUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutRow this[int index] {
                get {
                    return ((BillOutRow)(this.Rows[index]));
                }
            }
            
            public event BillOutRowChangeEventHandler BillOutRowChanging;
            
            public event BillOutRowChangeEventHandler BillOutRowChanged;
            
            public event BillOutRowChangeEventHandler BillOutRowDeleting;
            
            public event BillOutRowChangeEventHandler BillOutRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBillOutRow(BillOutRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutRow AddBillOutRow(
                        string cBNo, 
                        string cBClass, 
                        string cBType, 
                        string cDept, 
                        string cPayer, 
                        string cRemark, 
                        string cChecker, 
                        string cStatus, 
                        System.DateTime dDate, 
                        string cIsChecked, 
                        string cIsFinished, 
                        string cLinkId, 
                        string cFileNo, 
                        string cFileName, 
                        string cEventAddr, 
                        string dEventTime, 
                        string cEventType, 
                        string cEventLevel, 
                        string cStartLevel, 
                        string cMatClass, 
                        string cMatUnit) {
                BillOutRow rowBillOutRow = ((BillOutRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cBNo,
                        cBClass,
                        cBType,
                        cDept,
                        cPayer,
                        cRemark,
                        cChecker,
                        cStatus,
                        dDate,
                        cIsChecked,
                        cIsFinished,
                        cLinkId,
                        cFileNo,
                        cFileName,
                        cEventAddr,
                        dEventTime,
                        cEventType,
                        cEventLevel,
                        cStartLevel,
                        cMatClass,
                        cMatUnit};
                rowBillOutRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBillOutRow);
                return rowBillOutRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BillOutDataTable cln = ((BillOutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BillOutDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncBNo = base.Columns["cBNo"];
                this.columncBClass = base.Columns["cBClass"];
                this.columncBType = base.Columns["cBType"];
                this.columncDept = base.Columns["cDept"];
                this.columncPayer = base.Columns["cPayer"];
                this.columncRemark = base.Columns["cRemark"];
                this.columncChecker = base.Columns["cChecker"];
                this.columncStatus = base.Columns["cStatus"];
                this.columndDate = base.Columns["dDate"];
                this.columncIsChecked = base.Columns["cIsChecked"];
                this.columncIsFinished = base.Columns["cIsFinished"];
                this.columncLinkId = base.Columns["cLinkId"];
                this.columncFileNo = base.Columns["cFileNo"];
                this.columncFileName = base.Columns["cFileName"];
                this.columncEventAddr = base.Columns["cEventAddr"];
                this.columndEventTime = base.Columns["dEventTime"];
                this.columncEventType = base.Columns["cEventType"];
                this.columncEventLevel = base.Columns["cEventLevel"];
                this.columncStartLevel = base.Columns["cStartLevel"];
                this.columncMatClass = base.Columns["cMatClass"];
                this.columncMatUnit = base.Columns["cMatUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncBClass = new global::System.Data.DataColumn("cBClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBClass);
                this.columncBType = new global::System.Data.DataColumn("cBType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBType);
                this.columncDept = new global::System.Data.DataColumn("cDept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncDept);
                this.columncPayer = new global::System.Data.DataColumn("cPayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPayer);
                this.columncRemark = new global::System.Data.DataColumn("cRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncRemark);
                this.columncChecker = new global::System.Data.DataColumn("cChecker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncChecker);
                this.columncStatus = new global::System.Data.DataColumn("cStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncStatus);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columncIsChecked = new global::System.Data.DataColumn("cIsChecked", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncIsChecked);
                this.columncIsFinished = new global::System.Data.DataColumn("cIsFinished", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncIsFinished);
                this.columncLinkId = new global::System.Data.DataColumn("cLinkId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncLinkId);
                this.columncFileNo = new global::System.Data.DataColumn("cFileNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncFileNo);
                this.columncFileName = new global::System.Data.DataColumn("cFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncFileName);
                this.columncEventAddr = new global::System.Data.DataColumn("cEventAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncEventAddr);
                this.columndEventTime = new global::System.Data.DataColumn("dEventTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndEventTime);
                this.columncEventType = new global::System.Data.DataColumn("cEventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncEventType);
                this.columncEventLevel = new global::System.Data.DataColumn("cEventLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncEventLevel);
                this.columncStartLevel = new global::System.Data.DataColumn("cStartLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncStartLevel);
                this.columncMatClass = new global::System.Data.DataColumn("cMatClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatClass);
                this.columncMatUnit = new global::System.Data.DataColumn("cMatUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatUnit);
                this.columncBNo.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutRow NewBillOutRow() {
                return ((BillOutRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BillOutRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BillOutRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BillOutRowChanged != null)) {
                    this.BillOutRowChanged(this, new BillOutRowChangeEvent(((BillOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BillOutRowChanging != null)) {
                    this.BillOutRowChanging(this, new BillOutRowChangeEvent(((BillOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BillOutRowDeleted != null)) {
                    this.BillOutRowDeleted(this, new BillOutRowChangeEvent(((BillOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BillOutRowDeleting != null)) {
                    this.BillOutRowDeleting(this, new BillOutRowChangeEvent(((BillOutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBillOutRow(BillOutRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBillOut ds = new dsBillOut();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BillOutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BillOutDtlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columndProdDate;
            
            private global::System.Data.DataColumn columndBadDate;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnfFinished;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columncDtlRemark;
            
            private global::System.Data.DataColumn columncUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlDataTable() {
                this.TableName = "BillOutDtl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BillOutDtlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BillOutDtlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dProdDateColumn {
                get {
                    return this.columndProdDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dBadDateColumn {
                get {
                    return this.columndBadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fFinishedColumn {
                get {
                    return this.columnfFinished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cDtlRemarkColumn {
                get {
                    return this.columncDtlRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlRow this[int index] {
                get {
                    return ((BillOutDtlRow)(this.Rows[index]));
                }
            }
            
            public event BillOutDtlRowChangeEventHandler BillOutDtlRowChanging;
            
            public event BillOutDtlRowChangeEventHandler BillOutDtlRowChanged;
            
            public event BillOutDtlRowChangeEventHandler BillOutDtlRowDeleting;
            
            public event BillOutDtlRowChangeEventHandler BillOutDtlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBillOutDtlRow(BillOutDtlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlRow AddBillOutDtlRow(string cMNo, string cMName, string cBNo, string cSpec, string cBatchNo, string dProdDate, string dBadDate, string fQty, string fFinished, string cQCStatus, string cDtlRemark, string cUnit) {
                BillOutDtlRow rowBillOutDtlRow = ((BillOutDtlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        cMName,
                        cBNo,
                        cSpec,
                        cBatchNo,
                        dProdDate,
                        dBadDate,
                        fQty,
                        fFinished,
                        cQCStatus,
                        cDtlRemark,
                        cUnit};
                rowBillOutDtlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBillOutDtlRow);
                return rowBillOutDtlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BillOutDtlDataTable cln = ((BillOutDtlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BillOutDtlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columncBNo = base.Columns["cBNo"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columndProdDate = base.Columns["dProdDate"];
                this.columndBadDate = base.Columns["dBadDate"];
                this.columnfQty = base.Columns["fQty"];
                this.columnfFinished = base.Columns["fFinished"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columncDtlRemark = base.Columns["cDtlRemark"];
                this.columncUnit = base.Columns["cUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columndProdDate = new global::System.Data.DataColumn("dProdDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndProdDate);
                this.columndBadDate = new global::System.Data.DataColumn("dBadDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndBadDate);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnfFinished = new global::System.Data.DataColumn("fFinished", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfFinished);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columncDtlRemark = new global::System.Data.DataColumn("cDtlRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncDtlRemark);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlRow NewBillOutDtlRow() {
                return ((BillOutDtlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BillOutDtlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BillOutDtlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BillOutDtlRowChanged != null)) {
                    this.BillOutDtlRowChanged(this, new BillOutDtlRowChangeEvent(((BillOutDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BillOutDtlRowChanging != null)) {
                    this.BillOutDtlRowChanging(this, new BillOutDtlRowChangeEvent(((BillOutDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BillOutDtlRowDeleted != null)) {
                    this.BillOutDtlRowDeleted(this, new BillOutDtlRowChangeEvent(((BillOutDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BillOutDtlRowDeleting != null)) {
                    this.BillOutDtlRowDeleting(this, new BillOutDtlRowChangeEvent(((BillOutDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBillOutDtlRow(BillOutDtlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsBillOut ds = new dsBillOut();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BillOutDtlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BillOutRow : global::System.Data.DataRow {
            
            private BillOutDataTable tableBillOut;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BillOutRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBillOut = ((BillOutDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBClass {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cBClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cBClass”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cBClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBType {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cBTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cBType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cBTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cDept {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cDeptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cDept”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cDeptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPayer {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cPayer”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cRemark {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cChecker {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cCheckerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cChecker”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cCheckerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cStatus {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBillOut.dDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“dDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cIsChecked {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cIsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cIsChecked”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cIsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cIsFinished {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cIsFinishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cIsFinished”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cIsFinishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cLinkId {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cLinkIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cLinkId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cLinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cFileNo {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cFileNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cFileNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cFileNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cFileName {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cFileName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cEventAddr {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cEventAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cEventAddr”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cEventAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dEventTime {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.dEventTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“dEventTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.dEventTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cEventType {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cEventTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cEventType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cEventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cEventLevel {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cEventLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cEventLevel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cEventLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cStartLevel {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cStartLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cStartLevel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cStartLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatClass {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cMatClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cMatClass”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cMatClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatUnit {
                get {
                    try {
                        return ((string)(this[this.tableBillOut.cMatUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOut”中列“cMatUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOut.cMatUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tableBillOut.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tableBillOut.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBClassNull() {
                return this.IsNull(this.tableBillOut.cBClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBClassNull() {
                this[this.tableBillOut.cBClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBTypeNull() {
                return this.IsNull(this.tableBillOut.cBTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBTypeNull() {
                this[this.tableBillOut.cBTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscDeptNull() {
                return this.IsNull(this.tableBillOut.cDeptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcDeptNull() {
                this[this.tableBillOut.cDeptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPayerNull() {
                return this.IsNull(this.tableBillOut.cPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPayerNull() {
                this[this.tableBillOut.cPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscRemarkNull() {
                return this.IsNull(this.tableBillOut.cRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcRemarkNull() {
                this[this.tableBillOut.cRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscCheckerNull() {
                return this.IsNull(this.tableBillOut.cCheckerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcCheckerNull() {
                this[this.tableBillOut.cCheckerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscStatusNull() {
                return this.IsNull(this.tableBillOut.cStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcStatusNull() {
                this[this.tableBillOut.cStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdDateNull() {
                return this.IsNull(this.tableBillOut.dDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdDateNull() {
                this[this.tableBillOut.dDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsCheckedNull() {
                return this.IsNull(this.tableBillOut.cIsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcIsCheckedNull() {
                this[this.tableBillOut.cIsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsFinishedNull() {
                return this.IsNull(this.tableBillOut.cIsFinishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcIsFinishedNull() {
                this[this.tableBillOut.cIsFinishedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscLinkIdNull() {
                return this.IsNull(this.tableBillOut.cLinkIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcLinkIdNull() {
                this[this.tableBillOut.cLinkIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscFileNoNull() {
                return this.IsNull(this.tableBillOut.cFileNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcFileNoNull() {
                this[this.tableBillOut.cFileNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscFileNameNull() {
                return this.IsNull(this.tableBillOut.cFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcFileNameNull() {
                this[this.tableBillOut.cFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscEventAddrNull() {
                return this.IsNull(this.tableBillOut.cEventAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcEventAddrNull() {
                this[this.tableBillOut.cEventAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdEventTimeNull() {
                return this.IsNull(this.tableBillOut.dEventTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdEventTimeNull() {
                this[this.tableBillOut.dEventTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscEventTypeNull() {
                return this.IsNull(this.tableBillOut.cEventTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcEventTypeNull() {
                this[this.tableBillOut.cEventTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscEventLevelNull() {
                return this.IsNull(this.tableBillOut.cEventLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcEventLevelNull() {
                this[this.tableBillOut.cEventLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscStartLevelNull() {
                return this.IsNull(this.tableBillOut.cStartLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcStartLevelNull() {
                this[this.tableBillOut.cStartLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatClassNull() {
                return this.IsNull(this.tableBillOut.cMatClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatClassNull() {
                this[this.tableBillOut.cMatClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatUnitNull() {
                return this.IsNull(this.tableBillOut.cMatUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatUnitNull() {
                this[this.tableBillOut.cMatUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BillOutDtlRow : global::System.Data.DataRow {
            
            private BillOutDtlDataTable tableBillOutDtl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BillOutDtlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBillOutDtl = ((BillOutDtlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dProdDate {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.dProdDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“dProdDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.dProdDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dBadDate {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.dBadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“dBadDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.dBadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fFinished {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.fFinishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“fFinished”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.fFinishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQCStatus {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cDtlRemark {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cDtlRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cDtlRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cDtlRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableBillOutDtl.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BillOutDtl”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBillOutDtl.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableBillOutDtl.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableBillOutDtl.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableBillOutDtl.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableBillOutDtl.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tableBillOutDtl.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tableBillOutDtl.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableBillOutDtl.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableBillOutDtl.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tableBillOutDtl.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tableBillOutDtl.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdProdDateNull() {
                return this.IsNull(this.tableBillOutDtl.dProdDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdProdDateNull() {
                this[this.tableBillOutDtl.dProdDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdBadDateNull() {
                return this.IsNull(this.tableBillOutDtl.dBadDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdBadDateNull() {
                this[this.tableBillOutDtl.dBadDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableBillOutDtl.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableBillOutDtl.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfFinishedNull() {
                return this.IsNull(this.tableBillOutDtl.fFinishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfFinishedNull() {
                this[this.tableBillOutDtl.fFinishedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tableBillOutDtl.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tableBillOutDtl.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscDtlRemarkNull() {
                return this.IsNull(this.tableBillOutDtl.cDtlRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcDtlRemarkNull() {
                this[this.tableBillOutDtl.cDtlRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableBillOutDtl.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableBillOutDtl.cUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BillOutRowChangeEvent : global::System.EventArgs {
            
            private BillOutRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutRowChangeEvent(BillOutRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BillOutDtlRowChangeEvent : global::System.EventArgs {
            
            private BillOutDtlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlRowChangeEvent(BillOutDtlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BillOutDtlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
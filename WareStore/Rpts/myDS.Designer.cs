//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WareStore.Rpts {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("myDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class myDS : global::System.Data.DataSet {
        
        private matInOutReceDataTable tablematInOutRece;
        
        private matInOutReceAllDataTable tablematInOutReceAll;
        
        private SlackMatCountDataTable tableSlackMatCount;
        
        private SlackMatDtlDataTable tableSlackMatDtl;
        
        private tbBillCheckDataTable tabletbBillCheck;
        
        private tbBillCheckListDataTable tabletbBillCheckList;
        
        private tbBillCheckDtlDataTable tabletbBillCheckDtl;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public myDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected myDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["matInOutRece"] != null)) {
                    base.Tables.Add(new matInOutReceDataTable(ds.Tables["matInOutRece"]));
                }
                if ((ds.Tables["matInOutReceAll"] != null)) {
                    base.Tables.Add(new matInOutReceAllDataTable(ds.Tables["matInOutReceAll"]));
                }
                if ((ds.Tables["SlackMatCount"] != null)) {
                    base.Tables.Add(new SlackMatCountDataTable(ds.Tables["SlackMatCount"]));
                }
                if ((ds.Tables["SlackMatDtl"] != null)) {
                    base.Tables.Add(new SlackMatDtlDataTable(ds.Tables["SlackMatDtl"]));
                }
                if ((ds.Tables["tbBillCheck"] != null)) {
                    base.Tables.Add(new tbBillCheckDataTable(ds.Tables["tbBillCheck"]));
                }
                if ((ds.Tables["tbBillCheckList"] != null)) {
                    base.Tables.Add(new tbBillCheckListDataTable(ds.Tables["tbBillCheckList"]));
                }
                if ((ds.Tables["tbBillCheckDtl"] != null)) {
                    base.Tables.Add(new tbBillCheckDtlDataTable(ds.Tables["tbBillCheckDtl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public matInOutReceDataTable matInOutRece {
            get {
                return this.tablematInOutRece;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public matInOutReceAllDataTable matInOutReceAll {
            get {
                return this.tablematInOutReceAll;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SlackMatCountDataTable SlackMatCount {
            get {
                return this.tableSlackMatCount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SlackMatDtlDataTable SlackMatDtl {
            get {
                return this.tableSlackMatDtl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbBillCheckDataTable tbBillCheck {
            get {
                return this.tabletbBillCheck;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbBillCheckListDataTable tbBillCheckList {
            get {
                return this.tabletbBillCheckList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tbBillCheckDtlDataTable tbBillCheckDtl {
            get {
                return this.tabletbBillCheckDtl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            myDS cln = ((myDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["matInOutRece"] != null)) {
                    base.Tables.Add(new matInOutReceDataTable(ds.Tables["matInOutRece"]));
                }
                if ((ds.Tables["matInOutReceAll"] != null)) {
                    base.Tables.Add(new matInOutReceAllDataTable(ds.Tables["matInOutReceAll"]));
                }
                if ((ds.Tables["SlackMatCount"] != null)) {
                    base.Tables.Add(new SlackMatCountDataTable(ds.Tables["SlackMatCount"]));
                }
                if ((ds.Tables["SlackMatDtl"] != null)) {
                    base.Tables.Add(new SlackMatDtlDataTable(ds.Tables["SlackMatDtl"]));
                }
                if ((ds.Tables["tbBillCheck"] != null)) {
                    base.Tables.Add(new tbBillCheckDataTable(ds.Tables["tbBillCheck"]));
                }
                if ((ds.Tables["tbBillCheckList"] != null)) {
                    base.Tables.Add(new tbBillCheckListDataTable(ds.Tables["tbBillCheckList"]));
                }
                if ((ds.Tables["tbBillCheckDtl"] != null)) {
                    base.Tables.Add(new tbBillCheckDtlDataTable(ds.Tables["tbBillCheckDtl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablematInOutRece = ((matInOutReceDataTable)(base.Tables["matInOutRece"]));
            if ((initTable == true)) {
                if ((this.tablematInOutRece != null)) {
                    this.tablematInOutRece.InitVars();
                }
            }
            this.tablematInOutReceAll = ((matInOutReceAllDataTable)(base.Tables["matInOutReceAll"]));
            if ((initTable == true)) {
                if ((this.tablematInOutReceAll != null)) {
                    this.tablematInOutReceAll.InitVars();
                }
            }
            this.tableSlackMatCount = ((SlackMatCountDataTable)(base.Tables["SlackMatCount"]));
            if ((initTable == true)) {
                if ((this.tableSlackMatCount != null)) {
                    this.tableSlackMatCount.InitVars();
                }
            }
            this.tableSlackMatDtl = ((SlackMatDtlDataTable)(base.Tables["SlackMatDtl"]));
            if ((initTable == true)) {
                if ((this.tableSlackMatDtl != null)) {
                    this.tableSlackMatDtl.InitVars();
                }
            }
            this.tabletbBillCheck = ((tbBillCheckDataTable)(base.Tables["tbBillCheck"]));
            if ((initTable == true)) {
                if ((this.tabletbBillCheck != null)) {
                    this.tabletbBillCheck.InitVars();
                }
            }
            this.tabletbBillCheckList = ((tbBillCheckListDataTable)(base.Tables["tbBillCheckList"]));
            if ((initTable == true)) {
                if ((this.tabletbBillCheckList != null)) {
                    this.tabletbBillCheckList.InitVars();
                }
            }
            this.tabletbBillCheckDtl = ((tbBillCheckDtlDataTable)(base.Tables["tbBillCheckDtl"]));
            if ((initTable == true)) {
                if ((this.tabletbBillCheckDtl != null)) {
                    this.tabletbBillCheckDtl.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "myDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/myDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablematInOutRece = new matInOutReceDataTable();
            base.Tables.Add(this.tablematInOutRece);
            this.tablematInOutReceAll = new matInOutReceAllDataTable();
            base.Tables.Add(this.tablematInOutReceAll);
            this.tableSlackMatCount = new SlackMatCountDataTable();
            base.Tables.Add(this.tableSlackMatCount);
            this.tableSlackMatDtl = new SlackMatDtlDataTable();
            base.Tables.Add(this.tableSlackMatDtl);
            this.tabletbBillCheck = new tbBillCheckDataTable();
            base.Tables.Add(this.tabletbBillCheck);
            this.tabletbBillCheckList = new tbBillCheckListDataTable();
            base.Tables.Add(this.tabletbBillCheckList);
            this.tabletbBillCheckDtl = new tbBillCheckDtlDataTable();
            base.Tables.Add(this.tabletbBillCheckDtl);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializematInOutRece() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializematInOutReceAll() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSlackMatCount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSlackMatDtl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbBillCheck() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbBillCheckList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetbBillCheckDtl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            myDS ds = new myDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void matInOutReceRowChangeEventHandler(object sender, matInOutReceRowChangeEvent e);
        
        public delegate void matInOutReceAllRowChangeEventHandler(object sender, matInOutReceAllRowChangeEvent e);
        
        public delegate void SlackMatCountRowChangeEventHandler(object sender, SlackMatCountRowChangeEvent e);
        
        public delegate void SlackMatDtlRowChangeEventHandler(object sender, SlackMatDtlRowChangeEvent e);
        
        public delegate void tbBillCheckRowChangeEventHandler(object sender, tbBillCheckRowChangeEvent e);
        
        public delegate void tbBillCheckListRowChangeEventHandler(object sender, tbBillCheckListRowChangeEvent e);
        
        public delegate void tbBillCheckDtlRowChangeEventHandler(object sender, tbBillCheckDtlRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class matInOutReceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMno;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceDataTable() {
                this.TableName = "matInOutRece";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal matInOutReceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected matInOutReceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMnoColumn {
                get {
                    return this.columncMno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cNameColumn {
                get {
                    return this.columncName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceRow this[int index] {
                get {
                    return ((matInOutReceRow)(this.Rows[index]));
                }
            }
            
            public event matInOutReceRowChangeEventHandler matInOutReceRowChanging;
            
            public event matInOutReceRowChangeEventHandler matInOutReceRowChanged;
            
            public event matInOutReceRowChangeEventHandler matInOutReceRowDeleting;
            
            public event matInOutReceRowChangeEventHandler matInOutReceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmatInOutReceRow(matInOutReceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceRow AddmatInOutReceRow(string cMno, string fQty, string cName, string cSpec, string cUnit) {
                matInOutReceRow rowmatInOutReceRow = ((matInOutReceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMno,
                        fQty,
                        cName,
                        cSpec,
                        cUnit};
                rowmatInOutReceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmatInOutReceRow);
                return rowmatInOutReceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                matInOutReceDataTable cln = ((matInOutReceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new matInOutReceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMno = base.Columns["cMno"];
                this.columnfQty = base.Columns["fQty"];
                this.columncName = base.Columns["cName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncUnit = base.Columns["cUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMno = new global::System.Data.DataColumn("cMno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMno);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncName = new global::System.Data.DataColumn("cName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceRow NewmatInOutReceRow() {
                return ((matInOutReceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new matInOutReceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(matInOutReceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.matInOutReceRowChanged != null)) {
                    this.matInOutReceRowChanged(this, new matInOutReceRowChangeEvent(((matInOutReceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.matInOutReceRowChanging != null)) {
                    this.matInOutReceRowChanging(this, new matInOutReceRowChangeEvent(((matInOutReceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.matInOutReceRowDeleted != null)) {
                    this.matInOutReceRowDeleted(this, new matInOutReceRowChangeEvent(((matInOutReceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.matInOutReceRowDeleting != null)) {
                    this.matInOutReceRowDeleting(this, new matInOutReceRowChangeEvent(((matInOutReceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovematInOutReceRow(matInOutReceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "matInOutReceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class matInOutReceAllDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncBoxId;
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncWhId;
            
            private global::System.Data.DataColumn columndInTime;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncReMark;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columncBTypeNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllDataTable() {
                this.TableName = "matInOutReceAll";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal matInOutReceAllDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected matInOutReceAllDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBoxIdColumn {
                get {
                    return this.columncBoxId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWhIdColumn {
                get {
                    return this.columncWhId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dInTimeColumn {
                get {
                    return this.columndInTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cReMarkColumn {
                get {
                    return this.columncReMark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBTypeNewColumn {
                get {
                    return this.columncBTypeNew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllRow this[int index] {
                get {
                    return ((matInOutReceAllRow)(this.Rows[index]));
                }
            }
            
            public event matInOutReceAllRowChangeEventHandler matInOutReceAllRowChanging;
            
            public event matInOutReceAllRowChangeEventHandler matInOutReceAllRowChanged;
            
            public event matInOutReceAllRowChangeEventHandler matInOutReceAllRowDeleting;
            
            public event matInOutReceAllRowChangeEventHandler matInOutReceAllRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmatInOutReceAllRow(matInOutReceAllRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllRow AddmatInOutReceAllRow(string nPalletId, string cBoxId, string cMNo, string cWhId, string dInTime, string fQty, string cBNo, string cReMark, string cUnit, string cBTypeNew) {
                matInOutReceAllRow rowmatInOutReceAllRow = ((matInOutReceAllRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nPalletId,
                        cBoxId,
                        cMNo,
                        cWhId,
                        dInTime,
                        fQty,
                        cBNo,
                        cReMark,
                        cUnit,
                        cBTypeNew};
                rowmatInOutReceAllRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmatInOutReceAllRow);
                return rowmatInOutReceAllRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                matInOutReceAllDataTable cln = ((matInOutReceAllDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new matInOutReceAllDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncBoxId = base.Columns["cBoxId"];
                this.columncMNo = base.Columns["cMNo"];
                this.columncWhId = base.Columns["cWhId"];
                this.columndInTime = base.Columns["dInTime"];
                this.columnfQty = base.Columns["fQty"];
                this.columncBNo = base.Columns["cBNo"];
                this.columncReMark = base.Columns["cReMark"];
                this.columncUnit = base.Columns["cUnit"];
                this.columncBTypeNew = base.Columns["cBTypeNew"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncBoxId = new global::System.Data.DataColumn("cBoxId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBoxId);
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncWhId = new global::System.Data.DataColumn("cWhId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWhId);
                this.columndInTime = new global::System.Data.DataColumn("dInTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndInTime);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncReMark = new global::System.Data.DataColumn("cReMark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncReMark);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columncBTypeNew = new global::System.Data.DataColumn("cBTypeNew", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBTypeNew);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllRow NewmatInOutReceAllRow() {
                return ((matInOutReceAllRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new matInOutReceAllRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(matInOutReceAllRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.matInOutReceAllRowChanged != null)) {
                    this.matInOutReceAllRowChanged(this, new matInOutReceAllRowChangeEvent(((matInOutReceAllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.matInOutReceAllRowChanging != null)) {
                    this.matInOutReceAllRowChanging(this, new matInOutReceAllRowChangeEvent(((matInOutReceAllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.matInOutReceAllRowDeleted != null)) {
                    this.matInOutReceAllRowDeleted(this, new matInOutReceAllRowChangeEvent(((matInOutReceAllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.matInOutReceAllRowDeleting != null)) {
                    this.matInOutReceAllRowDeleting(this, new matInOutReceAllRowChangeEvent(((matInOutReceAllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovematInOutReceAllRow(matInOutReceAllRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "matInOutReceAllDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SlackMatCountDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columncMatStyle;
            
            private global::System.Data.DataColumn columndLastDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountDataTable() {
                this.TableName = "SlackMatCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlackMatCountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SlackMatCountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatStyleColumn {
                get {
                    return this.columncMatStyle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dLastDateColumn {
                get {
                    return this.columndLastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountRow this[int index] {
                get {
                    return ((SlackMatCountRow)(this.Rows[index]));
                }
            }
            
            public event SlackMatCountRowChangeEventHandler SlackMatCountRowChanging;
            
            public event SlackMatCountRowChangeEventHandler SlackMatCountRowChanged;
            
            public event SlackMatCountRowChangeEventHandler SlackMatCountRowDeleting;
            
            public event SlackMatCountRowChangeEventHandler SlackMatCountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSlackMatCountRow(SlackMatCountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountRow AddSlackMatCountRow(string cMNo, string fQty, string cMName, string cSpec, string cUnit, string cMatStyle, string dLastDate) {
                SlackMatCountRow rowSlackMatCountRow = ((SlackMatCountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        fQty,
                        cMName,
                        cSpec,
                        cUnit,
                        cMatStyle,
                        dLastDate};
                rowSlackMatCountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSlackMatCountRow);
                return rowSlackMatCountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SlackMatCountDataTable cln = ((SlackMatCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SlackMatCountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columnfQty = base.Columns["fQty"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncUnit = base.Columns["cUnit"];
                this.columncMatStyle = base.Columns["cMatStyle"];
                this.columndLastDate = base.Columns["dLastDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columncMatStyle = new global::System.Data.DataColumn("cMatStyle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatStyle);
                this.columndLastDate = new global::System.Data.DataColumn("dLastDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndLastDate);
                this.columncMNo.Caption = "cMno";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountRow NewSlackMatCountRow() {
                return ((SlackMatCountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SlackMatCountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SlackMatCountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SlackMatCountRowChanged != null)) {
                    this.SlackMatCountRowChanged(this, new SlackMatCountRowChangeEvent(((SlackMatCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SlackMatCountRowChanging != null)) {
                    this.SlackMatCountRowChanging(this, new SlackMatCountRowChangeEvent(((SlackMatCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SlackMatCountRowDeleted != null)) {
                    this.SlackMatCountRowDeleted(this, new SlackMatCountRowChangeEvent(((SlackMatCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SlackMatCountRowDeleting != null)) {
                    this.SlackMatCountRowDeleting(this, new SlackMatCountRowChangeEvent(((SlackMatCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSlackMatCountRow(SlackMatCountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SlackMatCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SlackMatDtlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columncMatStyle;
            
            private global::System.Data.DataColumn columndLastDate;
            
            private global::System.Data.DataColumn columncPosId;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlDataTable() {
                this.TableName = "SlackMatDtl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlackMatDtlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SlackMatDtlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMatStyleColumn {
                get {
                    return this.columncMatStyle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dLastDateColumn {
                get {
                    return this.columndLastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlRow this[int index] {
                get {
                    return ((SlackMatDtlRow)(this.Rows[index]));
                }
            }
            
            public event SlackMatDtlRowChangeEventHandler SlackMatDtlRowChanging;
            
            public event SlackMatDtlRowChangeEventHandler SlackMatDtlRowChanged;
            
            public event SlackMatDtlRowChangeEventHandler SlackMatDtlRowDeleting;
            
            public event SlackMatDtlRowChangeEventHandler SlackMatDtlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSlackMatDtlRow(SlackMatDtlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlRow AddSlackMatDtlRow(string cMNo, string fQty, string cMName, string cSpec, string cUnit, string cMatStyle, string dLastDate, string cPosId, string nPalletId) {
                SlackMatDtlRow rowSlackMatDtlRow = ((SlackMatDtlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        fQty,
                        cMName,
                        cSpec,
                        cUnit,
                        cMatStyle,
                        dLastDate,
                        cPosId,
                        nPalletId};
                rowSlackMatDtlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSlackMatDtlRow);
                return rowSlackMatDtlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SlackMatDtlDataTable cln = ((SlackMatDtlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SlackMatDtlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columnfQty = base.Columns["fQty"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncUnit = base.Columns["cUnit"];
                this.columncMatStyle = base.Columns["cMatStyle"];
                this.columndLastDate = base.Columns["dLastDate"];
                this.columncPosId = base.Columns["cPosId"];
                this.columnnPalletId = base.Columns["nPalletId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columncMatStyle = new global::System.Data.DataColumn("cMatStyle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMatStyle);
                this.columndLastDate = new global::System.Data.DataColumn("dLastDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndLastDate);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncMNo.Caption = "cMno";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlRow NewSlackMatDtlRow() {
                return ((SlackMatDtlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SlackMatDtlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SlackMatDtlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SlackMatDtlRowChanged != null)) {
                    this.SlackMatDtlRowChanged(this, new SlackMatDtlRowChangeEvent(((SlackMatDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SlackMatDtlRowChanging != null)) {
                    this.SlackMatDtlRowChanging(this, new SlackMatDtlRowChangeEvent(((SlackMatDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SlackMatDtlRowDeleted != null)) {
                    this.SlackMatDtlRowDeleted(this, new SlackMatDtlRowChangeEvent(((SlackMatDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SlackMatDtlRowDeleting != null)) {
                    this.SlackMatDtlRowDeleting(this, new SlackMatDtlRowChangeEvent(((SlackMatDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSlackMatDtlRow(SlackMatDtlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SlackMatDtlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbBillCheckDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncBNo;
            
            private global::System.Data.DataColumn columncBType;
            
            private global::System.Data.DataColumn columncWHId;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columncIsChecked;
            
            private global::System.Data.DataColumn columncIsFinished;
            
            private global::System.Data.DataColumn columncUser;
            
            private global::System.Data.DataColumn columncRemark;
            
            private global::System.Data.DataColumn columncBNoAjust;
            
            private global::System.Data.DataColumn columncBNoBad;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDataTable() {
                this.TableName = "tbBillCheck";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbBillCheckDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoColumn {
                get {
                    return this.columncBNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBTypeColumn {
                get {
                    return this.columncBType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cWHIdColumn {
                get {
                    return this.columncWHId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cIsCheckedColumn {
                get {
                    return this.columncIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cIsFinishedColumn {
                get {
                    return this.columncIsFinished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUserColumn {
                get {
                    return this.columncUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cRemarkColumn {
                get {
                    return this.columncRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoAjustColumn {
                get {
                    return this.columncBNoAjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoBadColumn {
                get {
                    return this.columncBNoBad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckRow this[int index] {
                get {
                    return ((tbBillCheckRow)(this.Rows[index]));
                }
            }
            
            public event tbBillCheckRowChangeEventHandler tbBillCheckRowChanging;
            
            public event tbBillCheckRowChangeEventHandler tbBillCheckRowChanged;
            
            public event tbBillCheckRowChangeEventHandler tbBillCheckRowDeleting;
            
            public event tbBillCheckRowChangeEventHandler tbBillCheckRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbBillCheckRow(tbBillCheckRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckRow AddtbBillCheckRow(string cBNo, string cBType, string cWHId, string dDate, string cIsChecked, string cIsFinished, string cUser, string cRemark, string cBNoAjust, string cBNoBad) {
                tbBillCheckRow rowtbBillCheckRow = ((tbBillCheckRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cBNo,
                        cBType,
                        cWHId,
                        dDate,
                        cIsChecked,
                        cIsFinished,
                        cUser,
                        cRemark,
                        cBNoAjust,
                        cBNoBad};
                rowtbBillCheckRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbBillCheckRow);
                return rowtbBillCheckRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbBillCheckDataTable cln = ((tbBillCheckDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbBillCheckDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncBNo = base.Columns["cBNo"];
                this.columncBType = base.Columns["cBType"];
                this.columncWHId = base.Columns["cWHId"];
                this.columndDate = base.Columns["dDate"];
                this.columncIsChecked = base.Columns["cIsChecked"];
                this.columncIsFinished = base.Columns["cIsFinished"];
                this.columncUser = base.Columns["cUser"];
                this.columncRemark = base.Columns["cRemark"];
                this.columncBNoAjust = base.Columns["cBNoAjust"];
                this.columncBNoBad = base.Columns["cBNoBad"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncBNo = new global::System.Data.DataColumn("cBNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNo);
                this.columncBType = new global::System.Data.DataColumn("cBType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBType);
                this.columncWHId = new global::System.Data.DataColumn("cWHId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncWHId);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columncIsChecked = new global::System.Data.DataColumn("cIsChecked", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncIsChecked);
                this.columncIsFinished = new global::System.Data.DataColumn("cIsFinished", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncIsFinished);
                this.columncUser = new global::System.Data.DataColumn("cUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUser);
                this.columncRemark = new global::System.Data.DataColumn("cRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncRemark);
                this.columncBNoAjust = new global::System.Data.DataColumn("cBNoAjust", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNoAjust);
                this.columncBNoBad = new global::System.Data.DataColumn("cBNoBad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNoBad);
                this.columncBNo.Caption = "cMno";
                this.columncBType.Caption = "fQty";
                this.columncWHId.Caption = "cMName";
                this.columndDate.Caption = "cSpec";
                this.columncIsChecked.Caption = "cUnit";
                this.columncIsFinished.Caption = "cMatStyle";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckRow NewtbBillCheckRow() {
                return ((tbBillCheckRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbBillCheckRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbBillCheckRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbBillCheckRowChanged != null)) {
                    this.tbBillCheckRowChanged(this, new tbBillCheckRowChangeEvent(((tbBillCheckRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbBillCheckRowChanging != null)) {
                    this.tbBillCheckRowChanging(this, new tbBillCheckRowChangeEvent(((tbBillCheckRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbBillCheckRowDeleted != null)) {
                    this.tbBillCheckRowDeleted(this, new tbBillCheckRowChangeEvent(((tbBillCheckRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbBillCheckRowDeleting != null)) {
                    this.tbBillCheckRowDeleting(this, new tbBillCheckRowChangeEvent(((tbBillCheckRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbBillCheckRow(tbBillCheckRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbBillCheckDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbBillCheckListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnfDiff;
            
            private global::System.Data.DataColumn columnfBad;
            
            private global::System.Data.DataColumn columnfErpQty;
            
            private global::System.Data.DataColumn columncUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListDataTable() {
                this.TableName = "tbBillCheckList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbBillCheckListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fDiffColumn {
                get {
                    return this.columnfDiff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fBadColumn {
                get {
                    return this.columnfBad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fErpQtyColumn {
                get {
                    return this.columnfErpQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListRow this[int index] {
                get {
                    return ((tbBillCheckListRow)(this.Rows[index]));
                }
            }
            
            public event tbBillCheckListRowChangeEventHandler tbBillCheckListRowChanging;
            
            public event tbBillCheckListRowChangeEventHandler tbBillCheckListRowChanged;
            
            public event tbBillCheckListRowChangeEventHandler tbBillCheckListRowDeleting;
            
            public event tbBillCheckListRowChangeEventHandler tbBillCheckListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbBillCheckListRow(tbBillCheckListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListRow AddtbBillCheckListRow(string cMNo, string cMName, string cSpec, string cBatchNo, string cQCStatus, string fQty, string fDiff, string fBad, string fErpQty, string cUnit) {
                tbBillCheckListRow rowtbBillCheckListRow = ((tbBillCheckListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        cMName,
                        cSpec,
                        cBatchNo,
                        cQCStatus,
                        fQty,
                        fDiff,
                        fBad,
                        fErpQty,
                        cUnit};
                rowtbBillCheckListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbBillCheckListRow);
                return rowtbBillCheckListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbBillCheckListDataTable cln = ((tbBillCheckListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbBillCheckListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columnfQty = base.Columns["fQty"];
                this.columnfDiff = base.Columns["fDiff"];
                this.columnfBad = base.Columns["fBad"];
                this.columnfErpQty = base.Columns["fErpQty"];
                this.columncUnit = base.Columns["cUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnfDiff = new global::System.Data.DataColumn("fDiff", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfDiff);
                this.columnfBad = new global::System.Data.DataColumn("fBad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfBad);
                this.columnfErpQty = new global::System.Data.DataColumn("fErpQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfErpQty);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columncMNo.Caption = "cMno";
                this.columncMName.Caption = "fQty";
                this.columncSpec.Caption = "cMName";
                this.columncBatchNo.Caption = "cSpec";
                this.columncQCStatus.Caption = "cUnit";
                this.columnfQty.Caption = "cMatStyle";
                this.columnfDiff.Caption = "cUser";
                this.columnfBad.Caption = "dLastDate";
                this.columnfErpQty.Caption = "cRemark";
                this.columncUnit.Caption = "cBNoAjust";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListRow NewtbBillCheckListRow() {
                return ((tbBillCheckListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbBillCheckListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbBillCheckListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbBillCheckListRowChanged != null)) {
                    this.tbBillCheckListRowChanged(this, new tbBillCheckListRowChangeEvent(((tbBillCheckListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbBillCheckListRowChanging != null)) {
                    this.tbBillCheckListRowChanging(this, new tbBillCheckListRowChangeEvent(((tbBillCheckListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbBillCheckListRowDeleted != null)) {
                    this.tbBillCheckListRowDeleted(this, new tbBillCheckListRowChangeEvent(((tbBillCheckListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbBillCheckListRowDeleting != null)) {
                    this.tbBillCheckListRowDeleting(this, new tbBillCheckListRowChangeEvent(((tbBillCheckListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbBillCheckListRow(tbBillCheckListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbBillCheckListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tbBillCheckDtlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncMNo;
            
            private global::System.Data.DataColumn columncMName;
            
            private global::System.Data.DataColumn columncSpec;
            
            private global::System.Data.DataColumn columncBatchNo;
            
            private global::System.Data.DataColumn columncQCStatus;
            
            private global::System.Data.DataColumn columnfQty;
            
            private global::System.Data.DataColumn columnfDiff;
            
            private global::System.Data.DataColumn columnfBad;
            
            private global::System.Data.DataColumn columnfErpQty;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columncPosId;
            
            private global::System.Data.DataColumn columnnPalletId;
            
            private global::System.Data.DataColumn columncBoxId;
            
            private global::System.Data.DataColumn columncBNoIn;
            
            private global::System.Data.DataColumn columnnItemIn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlDataTable() {
                this.TableName = "tbBillCheckDtl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckDtlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tbBillCheckDtlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNoColumn {
                get {
                    return this.columncMNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMNameColumn {
                get {
                    return this.columncMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSpecColumn {
                get {
                    return this.columncSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBatchNoColumn {
                get {
                    return this.columncBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cQCStatusColumn {
                get {
                    return this.columncQCStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fQtyColumn {
                get {
                    return this.columnfQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fDiffColumn {
                get {
                    return this.columnfDiff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fBadColumn {
                get {
                    return this.columnfBad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fErpQtyColumn {
                get {
                    return this.columnfErpQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cPosIdColumn {
                get {
                    return this.columncPosId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPalletIdColumn {
                get {
                    return this.columnnPalletId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBoxIdColumn {
                get {
                    return this.columncBoxId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cBNoInColumn {
                get {
                    return this.columncBNoIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nItemInColumn {
                get {
                    return this.columnnItemIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlRow this[int index] {
                get {
                    return ((tbBillCheckDtlRow)(this.Rows[index]));
                }
            }
            
            public event tbBillCheckDtlRowChangeEventHandler tbBillCheckDtlRowChanging;
            
            public event tbBillCheckDtlRowChangeEventHandler tbBillCheckDtlRowChanged;
            
            public event tbBillCheckDtlRowChangeEventHandler tbBillCheckDtlRowDeleting;
            
            public event tbBillCheckDtlRowChangeEventHandler tbBillCheckDtlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtbBillCheckDtlRow(tbBillCheckDtlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlRow AddtbBillCheckDtlRow(string cMNo, string cMName, string cSpec, string cBatchNo, string cQCStatus, string fQty, string fDiff, string fBad, string fErpQty, string cUnit, string cPosId, string nPalletId, string cBoxId, string cBNoIn, string nItemIn) {
                tbBillCheckDtlRow rowtbBillCheckDtlRow = ((tbBillCheckDtlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cMNo,
                        cMName,
                        cSpec,
                        cBatchNo,
                        cQCStatus,
                        fQty,
                        fDiff,
                        fBad,
                        fErpQty,
                        cUnit,
                        cPosId,
                        nPalletId,
                        cBoxId,
                        cBNoIn,
                        nItemIn};
                rowtbBillCheckDtlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtbBillCheckDtlRow);
                return rowtbBillCheckDtlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tbBillCheckDtlDataTable cln = ((tbBillCheckDtlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tbBillCheckDtlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncMNo = base.Columns["cMNo"];
                this.columncMName = base.Columns["cMName"];
                this.columncSpec = base.Columns["cSpec"];
                this.columncBatchNo = base.Columns["cBatchNo"];
                this.columncQCStatus = base.Columns["cQCStatus"];
                this.columnfQty = base.Columns["fQty"];
                this.columnfDiff = base.Columns["fDiff"];
                this.columnfBad = base.Columns["fBad"];
                this.columnfErpQty = base.Columns["fErpQty"];
                this.columncUnit = base.Columns["cUnit"];
                this.columncPosId = base.Columns["cPosId"];
                this.columnnPalletId = base.Columns["nPalletId"];
                this.columncBoxId = base.Columns["cBoxId"];
                this.columncBNoIn = base.Columns["cBNoIn"];
                this.columnnItemIn = base.Columns["nItemIn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncMNo = new global::System.Data.DataColumn("cMNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMNo);
                this.columncMName = new global::System.Data.DataColumn("cMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMName);
                this.columncSpec = new global::System.Data.DataColumn("cSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSpec);
                this.columncBatchNo = new global::System.Data.DataColumn("cBatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBatchNo);
                this.columncQCStatus = new global::System.Data.DataColumn("cQCStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncQCStatus);
                this.columnfQty = new global::System.Data.DataColumn("fQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfQty);
                this.columnfDiff = new global::System.Data.DataColumn("fDiff", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfDiff);
                this.columnfBad = new global::System.Data.DataColumn("fBad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfBad);
                this.columnfErpQty = new global::System.Data.DataColumn("fErpQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfErpQty);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columncPosId = new global::System.Data.DataColumn("cPosId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncPosId);
                this.columnnPalletId = new global::System.Data.DataColumn("nPalletId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPalletId);
                this.columncBoxId = new global::System.Data.DataColumn("cBoxId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBoxId);
                this.columncBNoIn = new global::System.Data.DataColumn("cBNoIn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncBNoIn);
                this.columnnItemIn = new global::System.Data.DataColumn("nItemIn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnItemIn);
                this.columncMNo.Caption = "cMno";
                this.columncMName.Caption = "fQty";
                this.columncSpec.Caption = "cMName";
                this.columncBatchNo.Caption = "cSpec";
                this.columncQCStatus.Caption = "cUnit";
                this.columnfQty.Caption = "cMatStyle";
                this.columnfDiff.Caption = "cUser";
                this.columnfBad.Caption = "dLastDate";
                this.columnfErpQty.Caption = "cRemark";
                this.columncUnit.Caption = "cBNoAjust";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlRow NewtbBillCheckDtlRow() {
                return ((tbBillCheckDtlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tbBillCheckDtlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tbBillCheckDtlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tbBillCheckDtlRowChanged != null)) {
                    this.tbBillCheckDtlRowChanged(this, new tbBillCheckDtlRowChangeEvent(((tbBillCheckDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tbBillCheckDtlRowChanging != null)) {
                    this.tbBillCheckDtlRowChanging(this, new tbBillCheckDtlRowChangeEvent(((tbBillCheckDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tbBillCheckDtlRowDeleted != null)) {
                    this.tbBillCheckDtlRowDeleted(this, new tbBillCheckDtlRowChangeEvent(((tbBillCheckDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tbBillCheckDtlRowDeleting != null)) {
                    this.tbBillCheckDtlRowDeleting(this, new tbBillCheckDtlRowChangeEvent(((tbBillCheckDtlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetbBillCheckDtlRow(tbBillCheckDtlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                myDS ds = new myDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tbBillCheckDtlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class matInOutReceRow : global::System.Data.DataRow {
            
            private matInOutReceDataTable tablematInOutRece;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal matInOutReceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablematInOutRece = ((matInOutReceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMno {
                get {
                    try {
                        return ((string)(this[this.tablematInOutRece.cMnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutRece”中列“cMno”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutRece.cMnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tablematInOutRece.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutRece”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutRece.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cName {
                get {
                    try {
                        return ((string)(this[this.tablematInOutRece.cNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutRece”中列“cName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutRece.cNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tablematInOutRece.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutRece”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutRece.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tablematInOutRece.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutRece”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutRece.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMnoNull() {
                return this.IsNull(this.tablematInOutRece.cMnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMnoNull() {
                this[this.tablematInOutRece.cMnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tablematInOutRece.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tablematInOutRece.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscNameNull() {
                return this.IsNull(this.tablematInOutRece.cNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcNameNull() {
                this[this.tablematInOutRece.cNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tablematInOutRece.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tablematInOutRece.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tablematInOutRece.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tablematInOutRece.cUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class matInOutReceAllRow : global::System.Data.DataRow {
            
            private matInOutReceAllDataTable tablematInOutReceAll;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal matInOutReceAllRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablematInOutReceAll = ((matInOutReceAllDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBoxId {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cBoxIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cBoxId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cBoxIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWhId {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cWhIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cWhId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cWhIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dInTime {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.dInTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“dInTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.dInTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cReMark {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cReMarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cReMark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cReMarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBTypeNew {
                get {
                    try {
                        return ((string)(this[this.tablematInOutReceAll.cBTypeNewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“matInOutReceAll”中列“cBTypeNew”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablematInOutReceAll.cBTypeNewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tablematInOutReceAll.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tablematInOutReceAll.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBoxIdNull() {
                return this.IsNull(this.tablematInOutReceAll.cBoxIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBoxIdNull() {
                this[this.tablematInOutReceAll.cBoxIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tablematInOutReceAll.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tablematInOutReceAll.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWhIdNull() {
                return this.IsNull(this.tablematInOutReceAll.cWhIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWhIdNull() {
                this[this.tablematInOutReceAll.cWhIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdInTimeNull() {
                return this.IsNull(this.tablematInOutReceAll.dInTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdInTimeNull() {
                this[this.tablematInOutReceAll.dInTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tablematInOutReceAll.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tablematInOutReceAll.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tablematInOutReceAll.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tablematInOutReceAll.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscReMarkNull() {
                return this.IsNull(this.tablematInOutReceAll.cReMarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcReMarkNull() {
                this[this.tablematInOutReceAll.cReMarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tablematInOutReceAll.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tablematInOutReceAll.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBTypeNewNull() {
                return this.IsNull(this.tablematInOutReceAll.cBTypeNewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBTypeNewNull() {
                this[this.tablematInOutReceAll.cBTypeNewColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SlackMatCountRow : global::System.Data.DataRow {
            
            private SlackMatCountDataTable tableSlackMatCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlackMatCountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSlackMatCount = ((SlackMatCountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatStyle {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.cMatStyleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“cMatStyle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.cMatStyleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dLastDate {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatCount.dLastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatCount”中列“dLastDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatCount.dLastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableSlackMatCount.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableSlackMatCount.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableSlackMatCount.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableSlackMatCount.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableSlackMatCount.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableSlackMatCount.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableSlackMatCount.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableSlackMatCount.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableSlackMatCount.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableSlackMatCount.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatStyleNull() {
                return this.IsNull(this.tableSlackMatCount.cMatStyleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatStyleNull() {
                this[this.tableSlackMatCount.cMatStyleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdLastDateNull() {
                return this.IsNull(this.tableSlackMatCount.dLastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdLastDateNull() {
                this[this.tableSlackMatCount.dLastDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SlackMatDtlRow : global::System.Data.DataRow {
            
            private SlackMatDtlDataTable tableSlackMatDtl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlackMatDtlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSlackMatDtl = ((SlackMatDtlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMatStyle {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cMatStyleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cMatStyle”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cMatStyleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dLastDate {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.dLastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“dLastDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.dLastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tableSlackMatDtl.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SlackMatDtl”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSlackMatDtl.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tableSlackMatDtl.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tableSlackMatDtl.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tableSlackMatDtl.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tableSlackMatDtl.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tableSlackMatDtl.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tableSlackMatDtl.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tableSlackMatDtl.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tableSlackMatDtl.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableSlackMatDtl.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableSlackMatDtl.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMatStyleNull() {
                return this.IsNull(this.tableSlackMatDtl.cMatStyleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMatStyleNull() {
                this[this.tableSlackMatDtl.cMatStyleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdLastDateNull() {
                return this.IsNull(this.tableSlackMatDtl.dLastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdLastDateNull() {
                this[this.tableSlackMatDtl.dLastDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tableSlackMatDtl.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tableSlackMatDtl.cPosIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tableSlackMatDtl.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tableSlackMatDtl.nPalletIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbBillCheckRow : global::System.Data.DataRow {
            
            private tbBillCheckDataTable tabletbBillCheck;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbBillCheck = ((tbBillCheckDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNo {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cBNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cBNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cBNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBType {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cBTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cBType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cBTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cWHId {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cWHIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cWHId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cWHIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dDate {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.dDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“dDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cIsChecked {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cIsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cIsChecked”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cIsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cIsFinished {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cIsFinishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cIsFinished”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cIsFinishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUser {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cUser”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cRemark {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cRemark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNoAjust {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cBNoAjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cBNoAjust”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cBNoAjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNoBad {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheck.cBNoBadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheck”中列“cBNoBad”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheck.cBNoBadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoNull() {
                return this.IsNull(this.tabletbBillCheck.cBNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoNull() {
                this[this.tabletbBillCheck.cBNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBTypeNull() {
                return this.IsNull(this.tabletbBillCheck.cBTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBTypeNull() {
                this[this.tabletbBillCheck.cBTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscWHIdNull() {
                return this.IsNull(this.tabletbBillCheck.cWHIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcWHIdNull() {
                this[this.tabletbBillCheck.cWHIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdDateNull() {
                return this.IsNull(this.tabletbBillCheck.dDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdDateNull() {
                this[this.tabletbBillCheck.dDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsCheckedNull() {
                return this.IsNull(this.tabletbBillCheck.cIsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcIsCheckedNull() {
                this[this.tabletbBillCheck.cIsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscIsFinishedNull() {
                return this.IsNull(this.tabletbBillCheck.cIsFinishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcIsFinishedNull() {
                this[this.tabletbBillCheck.cIsFinishedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUserNull() {
                return this.IsNull(this.tabletbBillCheck.cUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUserNull() {
                this[this.tabletbBillCheck.cUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscRemarkNull() {
                return this.IsNull(this.tabletbBillCheck.cRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcRemarkNull() {
                this[this.tabletbBillCheck.cRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoAjustNull() {
                return this.IsNull(this.tabletbBillCheck.cBNoAjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoAjustNull() {
                this[this.tabletbBillCheck.cBNoAjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoBadNull() {
                return this.IsNull(this.tabletbBillCheck.cBNoBadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoBadNull() {
                this[this.tabletbBillCheck.cBNoBadColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbBillCheckListRow : global::System.Data.DataRow {
            
            private tbBillCheckListDataTable tabletbBillCheckList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbBillCheckList = ((tbBillCheckListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQCStatus {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fDiff {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.fDiffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“fDiff”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.fDiffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fBad {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.fBadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“fBad”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.fBadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fErpQty {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.fErpQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“fErpQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.fErpQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckList.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckList”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckList.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tabletbBillCheckList.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tabletbBillCheckList.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tabletbBillCheckList.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tabletbBillCheckList.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tabletbBillCheckList.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tabletbBillCheckList.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tabletbBillCheckList.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tabletbBillCheckList.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tabletbBillCheckList.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tabletbBillCheckList.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tabletbBillCheckList.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tabletbBillCheckList.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfDiffNull() {
                return this.IsNull(this.tabletbBillCheckList.fDiffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfDiffNull() {
                this[this.tabletbBillCheckList.fDiffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfBadNull() {
                return this.IsNull(this.tabletbBillCheckList.fBadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfBadNull() {
                this[this.tabletbBillCheckList.fBadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfErpQtyNull() {
                return this.IsNull(this.tabletbBillCheckList.fErpQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfErpQtyNull() {
                this[this.tabletbBillCheckList.fErpQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tabletbBillCheckList.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tabletbBillCheckList.cUnitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tbBillCheckDtlRow : global::System.Data.DataRow {
            
            private tbBillCheckDtlDataTable tabletbBillCheckDtl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tbBillCheckDtlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletbBillCheckDtl = ((tbBillCheckDtlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMNo {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cMNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cMNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cMNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMName {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cMName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSpec {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBatchNo {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cBatchNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cBatchNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cBatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cQCStatus {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cQCStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cQCStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cQCStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fQty {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.fQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“fQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.fQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fDiff {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.fDiffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“fDiff”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.fDiffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fBad {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.fBadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“fBad”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.fBadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fErpQty {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.fErpQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“fErpQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.fErpQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cPosId {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cPosIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cPosId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cPosIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nPalletId {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.nPalletIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“nPalletId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.nPalletIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBoxId {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cBoxIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cBoxId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cBoxIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cBNoIn {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.cBNoInColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“cBNoIn”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.cBNoInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nItemIn {
                get {
                    try {
                        return ((string)(this[this.tabletbBillCheckDtl.nItemInColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“tbBillCheckDtl”中列“nItemIn”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabletbBillCheckDtl.nItemInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNoNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cMNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNoNull() {
                this[this.tabletbBillCheckDtl.cMNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMNameNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMNameNull() {
                this[this.tabletbBillCheckDtl.cMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSpecNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSpecNull() {
                this[this.tabletbBillCheckDtl.cSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBatchNoNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cBatchNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBatchNoNull() {
                this[this.tabletbBillCheckDtl.cBatchNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscQCStatusNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cQCStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcQCStatusNull() {
                this[this.tabletbBillCheckDtl.cQCStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfQtyNull() {
                return this.IsNull(this.tabletbBillCheckDtl.fQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfQtyNull() {
                this[this.tabletbBillCheckDtl.fQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfDiffNull() {
                return this.IsNull(this.tabletbBillCheckDtl.fDiffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfDiffNull() {
                this[this.tabletbBillCheckDtl.fDiffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfBadNull() {
                return this.IsNull(this.tabletbBillCheckDtl.fBadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfBadNull() {
                this[this.tabletbBillCheckDtl.fBadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfErpQtyNull() {
                return this.IsNull(this.tabletbBillCheckDtl.fErpQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfErpQtyNull() {
                this[this.tabletbBillCheckDtl.fErpQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tabletbBillCheckDtl.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscPosIdNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cPosIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcPosIdNull() {
                this[this.tabletbBillCheckDtl.cPosIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPalletIdNull() {
                return this.IsNull(this.tabletbBillCheckDtl.nPalletIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPalletIdNull() {
                this[this.tabletbBillCheckDtl.nPalletIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBoxIdNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cBoxIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBoxIdNull() {
                this[this.tabletbBillCheckDtl.cBoxIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscBNoInNull() {
                return this.IsNull(this.tabletbBillCheckDtl.cBNoInColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcBNoInNull() {
                this[this.tabletbBillCheckDtl.cBNoInColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnItemInNull() {
                return this.IsNull(this.tabletbBillCheckDtl.nItemInColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnItemInNull() {
                this[this.tabletbBillCheckDtl.nItemInColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class matInOutReceRowChangeEvent : global::System.EventArgs {
            
            private matInOutReceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceRowChangeEvent(matInOutReceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class matInOutReceAllRowChangeEvent : global::System.EventArgs {
            
            private matInOutReceAllRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllRowChangeEvent(matInOutReceAllRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public matInOutReceAllRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SlackMatCountRowChangeEvent : global::System.EventArgs {
            
            private SlackMatCountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountRowChangeEvent(SlackMatCountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SlackMatDtlRowChangeEvent : global::System.EventArgs {
            
            private SlackMatDtlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlRowChangeEvent(SlackMatDtlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlackMatDtlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbBillCheckRowChangeEvent : global::System.EventArgs {
            
            private tbBillCheckRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckRowChangeEvent(tbBillCheckRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbBillCheckListRowChangeEvent : global::System.EventArgs {
            
            private tbBillCheckListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListRowChangeEvent(tbBillCheckListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tbBillCheckDtlRowChangeEvent : global::System.EventArgs {
            
            private tbBillCheckDtlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlRowChangeEvent(tbBillCheckDtlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tbBillCheckDtlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591